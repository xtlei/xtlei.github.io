<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>蟹家之宝树</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/xtlei/xtlei.github.io/"/>
  <updated>2022-04-08T14:51:31.528Z</updated>
  <id>https://github.com/xtlei/xtlei.github.io/</id>
  
  <author>
    <name>XTLei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习笔记——绪论</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2022/04/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%AA%E8%AE%BA/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2022/04/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%AA%E8%AE%BA/</id>
    <published>2022-04-08T11:48:00.000Z</published>
    <updated>2022-04-08T14:51:31.528Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="机器学习研究内容"><a href="#机器学习研究内容" class="headerlink" title="机器学习研究内容"></a><strong>机器学习研究内容</strong></h4><p>机器学习研究的主要内容是从数据中产生“模型”的算法，即学习算法。</p><p><strong>“模型”</strong>泛指从数据中学得的结果。</p><p>从数据中学得模型的过程称为“学习”或“训练”，这个过程通过执行某个学习算法来完成。训练过程中使用的数据称为“训练数据”，其中每个样本称为“训练样本”，训练样本组成“训练集”。</p><p><strong>机器学习的前提：</strong></p><ul><li>数据中存在模式</li><li>模式无法形式化描述</li><li>有充分的数据</li></ul><p><strong>以此来讲，机器学习是基于一定的假设，从数据中学习出模式的过程。</strong></p><p><strong>机器学习的目标</strong>是使学得的模型能很好的适用于“新样本”，而不是仅仅在训练样本上工作的很好；即便对聚类这样的无监督学习任务，我们也希望学得的簇划分能适用于没在训练集中出现的样本。学得模型适用于新样本的能力，称为<strong>“泛化”（generalization）能力</strong>。</p><h4 id="学习的可行性"><a href="#学习的可行性" class="headerlink" title="学习的可行性"></a><strong>学习的可行性</strong></h4><p>样本和整体的关系</p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/machine_learning/ml_0_1.png" alt="img"></p><ul><li>在大样本的场景下，样本频率v可以任意精度逼近总体概率u</li><li>Hoeffding不等式</li></ul><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/machine_learning/ml_0_2.png" alt="img"></p><ul><li>Bound与u无关</li><li>无分布假设</li><li>数据量足够大，就可以用样本估计值代表真实值</li></ul><h4 id="机器学习问题分类"><a href="#机器学习问题分类" class="headerlink" title="机器学习问题分类"></a><strong>机器学习问题分类</strong></h4><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/machine_learning/ml_0_4.png" alt="img"></p><p><strong>监督学习（supervised learning）</strong>：训练数据有标记（label）信息。</p><p>在监督学习下，输入数据称为“训练数据”，每组训练数据都有明确的标识或结果，如反垃圾邮件系统中的“垃圾邮件”和“非垃圾邮件”，手写数字识别中的“1”、“2”、“3”、“4”。在建立预测模型时，监督学习建立学习过程，将预测结果与“训练数据”的实际结果进行比较，并不断调整预测模型，直到模型的预测结果达到预期的准确率。</p><p>预测的是离散值，此类学习任务称为<strong>“分类”（classification）</strong></p><p>涉及两个类别分类时：“二分类”（binary classification）任务</p><p>涉及多个类别分类时：“多分类”（multi-class classification）任务</p><p>预测的是连续值，此类学习任务称为<strong>“回归”（regression）</strong></p><p>常见的算法包括逻辑回归和反向传播神经网络。</p><p><strong>无监督学习（unsupervised learning）</strong>：训练数据无标记信息。</p><p>在无监督学习中，数据不是特别确定的，学习模型是为了推断数据的一些内部结构。常见的应用场景包括学习关联规则和聚类。常见的算法包括Apriori算法和k均值算法。</p><p><strong>“聚类”（clustering）</strong>将训练集中的数据分成若干组，每组称为一个“簇”（cluster）</p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/machine_learning/ml_0_3.png" alt="img"></p><p><strong>半监督学习</strong></p><p>在这种学习模式下，输入数据部分被识别，部分不被识别。这种学习模型可以用于预测，但是该模型首先需要学习数据的内部结构，以便合理地组织用于预测的数据。应用场景包括分类和回归。该算法包括一些常用监督学习算法的扩展。这些算法首先尝试对未标记数据建模，然后预测标记数据。图形推理或拉普拉斯SVM等。</p><p><strong>强化学习</strong></p><p>在这种学习模式中，输入数据被用作模型的反馈，与监督模型不同，输入数据仅被用作检查模型是对还是错的一种方式。在强化学习下，输入数据直接反馈给模型，模型必须立即进行调整。常见的应用场景包括动态系统和机器人控制。常见的算法包括问学习和时间差学习</p><p>在企业数据应用的背景下，监督学习和非监督学习的模型可能是最常用的。在图像识别等领域，由于存在大量未标记数据和少量可识别数据，半监督学习是目前研究的热点。然而，强化学习更多地应用于机器人控制和其他需要系统控制的领域。</p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/machine_learning/ml_0_5.png" alt="img"></p><h4 id="模型参数"><a href="#模型参数" class="headerlink" title="模型参数"></a><strong>模型参数</strong></h4><ul><li><strong>模型自身参数</strong>：通过样本学习得到的参数，如：逻辑回归及神经网络中的权重及偏置的学习等；</li><li><strong>超参数</strong>：模型框架的参数，如kmeans中的k，神经网络中的网络层数及每层的节点个数，通常由手工设定。</li></ul><h4 id="机器学习步骤"><a href="#机器学习步骤" class="headerlink" title="机器学习步骤"></a><strong>机器学习步骤</strong></h4><p>定义函数（选择算法）-&gt;定义函数优劣（评价指标）-&gt;选择最优函数</p></font></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;机器学习研究内容&quot;&gt;&lt;a href=&quot;#机器学习研究内容&quot; class=&quot;headerlink&quot; title=&quot;机器学习研究内容&quot;&gt;&lt;/a&gt;&lt;strong&gt;机器学习
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="Machine Learning" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/Machine-Learning/"/>
    
      <category term="Theoretical Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/Machine-Learning/Theoretical-Basis/"/>
    
    
      <category term="机器学习ML" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0ML/"/>
    
      <category term="监督学习" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="无监督学习" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="聚类" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E8%81%9A%E7%B1%BB/"/>
    
      <category term="分类" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%88%86%E7%B1%BB/"/>
    
      <category term="回归" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>SQL实践—Creat&amp;Insert&amp;Update&amp;Delete</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/06/17/SQL%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/06/17/SQL%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2020-06-17T07:30:38.000Z</published>
    <updated>2022-03-31T02:56:30.912Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="Create-Database-and-Table"><a href="#Create-Database-and-Table" class="headerlink" title="Create Database and Table"></a>Create Database and Table</h4><ul><li>创建名称为数据库sch_id的数据库（其中ID为本人学号的后三位），并使用该数据库。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [数据库sch_240];</span><br></pre></td></tr></table></figure><a id="more"></a>利用SQL语句定义6张基本表：D、T、S、C、TC、SC，并根据要求添加各类约束。</li></ul><ol><li>专业表：D(dno, dn)，dno表示专业代码，两个字符，主码；dn表示专业名称，可变长度最多30个字符，不能取空值，不能取重复值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> D(</span><br><span class="line">dno <span class="built_in">char</span>(<span class="number">2</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">dn <span class="keyword">NCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>教师表：T(tno,tn,sex,age,prof,sal,comm,dno)，tno表示教师号，4个字符，主码；tn表示教师姓名，8个字符，不能为空值；sex表示性别，不能为空值，取值只能是“男”或“女”；age表示年龄，整型值，取值范围在20到70之间；prof表示职称，6个字符，取值只能是“教授”、“副教授”、“讲师”、“助教”其中之一。Sal表示基本工资，浮点型，值不能少于800；comm表示奖金，浮点型，值不能少于1200；dno表示教师专业代码，两个字符50，外码。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T(</span><br><span class="line">tno <span class="built_in">CHAR</span>(<span class="number">4</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">tn <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">sex <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span>(sex = <span class="string">'男'</span> <span class="keyword">or</span> sex = <span class="string">'女'</span>),</span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">CHECK</span>(age&gt;=<span class="number">20</span> <span class="keyword">AND</span> age &lt;= <span class="number">70</span>),</span><br><span class="line">prof <span class="built_in">CHAR</span>(<span class="number">6</span>) <span class="keyword">CHECK</span>(prof = <span class="string">'教授'</span> <span class="keyword">OR</span> prof = <span class="string">'副教授'</span> <span class="keyword">OR</span> prof = <span class="string">'讲师'</span> <span class="keyword">OR</span> prof = <span class="string">'助教'</span>),</span><br><span class="line">Sal <span class="built_in">FLOAT</span>(<span class="number">20</span>) <span class="keyword">CHECK</span>(Sal &gt;= <span class="number">800</span>),</span><br><span class="line">comm <span class="built_in">FLOAT</span>(<span class="number">20</span>) <span class="keyword">CHECK</span>(comm &gt;= <span class="number">1200</span>),</span><br><span class="line">  dno <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> D(dno)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>学生表S(sno,sn,sex,age,dno)，sno表示学号，10个字符，主码；sn表示学生姓名，8个字符，不能为空值；sex表示性别，不能为空值，取值只能是“男”或“女”；age表示年龄，整型值，取值范围在15到40之间；dno表示学生的专业代码，两个字符50，外码。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> S(</span><br><span class="line">sno <span class="built_in">CHAR</span>(<span class="number">10</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">sn <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">sex <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span>(sex = <span class="string">'男'</span> <span class="keyword">OR</span> sex = <span class="string">'女'</span>),</span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">CHECK</span>((age&gt;=<span class="number">15</span>) <span class="keyword">AND</span> (age &lt;= <span class="number">40</span>)),</span><br><span class="line">dno <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> D(dno)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>课程表C(cno,cn,ct)，cno表示课程号，3个字符，主码；cn表示课程名，可变长度最多20个字符，不能取空值，不能取重复值；ct表示课时，整型值，取值范围在32至80之间。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> C(</span><br><span class="line">cno <span class="built_in">CHAR</span>(<span class="number">3</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">cn <span class="keyword">NCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">ct <span class="built_in">INT</span> <span class="keyword">CHECK</span>(ct&gt;=<span class="number">32</span> <span class="keyword">AND</span> ct &lt;= <span class="number">80</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>选课关系表SC(sno,cno,score)，sno表示学号，10个字符，外码；cno表示课程号，3个字符，外码；score表示成绩，浮点型，取值在0到100之间。(sno,cno)为主码。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">sno <span class="built_in">CHAR</span>(<span class="number">10</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> S(sno),</span><br><span class="line">cno <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> C(cno) PRIMARY <span class="keyword">KEY</span>(sno,cno),</span><br><span class="line">score <span class="built_in">FLOAT</span>(<span class="number">3</span>) <span class="keyword">CHECK</span>(score&gt;=<span class="number">0</span> <span class="keyword">AND</span> score &lt;= <span class="number">100</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>授课关系TC(tno,cno)，tno表示教师号，4个字符，外码；cno表示课程号，3个字符，外码；(tno，cno)为主码。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TC(</span><br><span class="line">tno <span class="built_in">CHAR</span>(<span class="number">4</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> T(tno),</span><br><span class="line">cno <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> C(cno) PRIMARY <span class="keyword">KEY</span>(tno,cno),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h4 id="创建测试库"><a href="#创建测试库" class="headerlink" title="创建测试库"></a>创建测试库</h4><ul><li>新建数据库和表及其插入部分表中数据代码如下：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [sch_240];</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> D(</span><br><span class="line">dno <span class="built_in">char</span>(<span class="number">2</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">dn <span class="keyword">NCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T(</span><br><span class="line">tno <span class="built_in">CHAR</span>(<span class="number">4</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">tn <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">sex <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span>(sex = <span class="string">'男'</span> <span class="keyword">or</span> sex = <span class="string">'女'</span>),</span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">CHECK</span>(age&gt;=<span class="number">20</span> <span class="keyword">AND</span> age &lt;= <span class="number">70</span>),</span><br><span class="line">prof <span class="built_in">CHAR</span>(<span class="number">6</span>) <span class="keyword">CHECK</span>(prof = <span class="string">'教授'</span> <span class="keyword">OR</span> prof = <span class="string">'副教授'</span> <span class="keyword">OR</span> prof = <span class="string">'讲师'</span> <span class="keyword">OR</span> prof = <span class="string">'助教'</span>),</span><br><span class="line">Sal <span class="built_in">FLOAT</span>(<span class="number">20</span>) <span class="keyword">CHECK</span>(Sal &gt;= <span class="number">800</span>),</span><br><span class="line">comm <span class="built_in">FLOAT</span>(<span class="number">20</span>) <span class="keyword">CHECK</span>(comm &gt;= <span class="number">1200</span>),</span><br><span class="line">    dno <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> D(dno)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> S(</span><br><span class="line">sno <span class="built_in">CHAR</span>(<span class="number">10</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">sn <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">sex <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span>(sex = <span class="string">'男'</span> <span class="keyword">OR</span> sex = <span class="string">'女'</span>),</span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">CHECK</span>((age&gt;=<span class="number">15</span>) <span class="keyword">AND</span> (age &lt;= <span class="number">40</span>)),</span><br><span class="line">dno <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> D(dno)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> C(</span><br><span class="line">cno <span class="built_in">CHAR</span>(<span class="number">3</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">cn <span class="keyword">NCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">ct <span class="built_in">INT</span> <span class="keyword">CHECK</span>(ct&gt;=<span class="number">32</span> <span class="keyword">AND</span> ct &lt;= <span class="number">80</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">sno <span class="built_in">CHAR</span>(<span class="number">10</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> S(sno),</span><br><span class="line">cno <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> C(cno) PRIMARY <span class="keyword">KEY</span>(sno,cno),</span><br><span class="line">score <span class="built_in">FLOAT</span>(<span class="number">3</span>) <span class="keyword">CHECK</span>(score&gt;=<span class="number">0</span> <span class="keyword">AND</span> score &lt;= <span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TC(</span><br><span class="line">tno <span class="built_in">CHAR</span>(<span class="number">4</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> T(tno),</span><br><span class="line">cno <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> C(cno) PRIMARY <span class="keyword">KEY</span>(tno,cno),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> D(dno,dn) <span class="keyword">VALUES</span>(<span class="string">'d1'</span>,<span class="string">'计算机系'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> D(dno,dn) <span class="keyword">VALUES</span>(<span class="string">'d2'</span>,<span class="string">'信息'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> D(dno,dn) <span class="keyword">VALUES</span>(<span class="string">'d3'</span>,<span class="string">'通信'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> D(dno,dn) <span class="keyword">VALUES</span>(<span class="string">'d4'</span>,<span class="string">'数理'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> T(tno,tn,sex,age,prof,sal,comm,dno) <span class="keyword">VALUES</span>(<span class="string">'t1'</span>,<span class="string">'张三'</span>,<span class="string">'女'</span>,<span class="number">20</span>,<span class="string">'副教授'</span>,<span class="number">800</span>,<span class="number">1200</span>,<span class="string">'d1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> T(tno,tn,sex,age,prof,sal,comm,dno) <span class="keyword">VALUES</span>(<span class="string">'t2'</span>,<span class="string">'安厚星'</span>,<span class="string">'男'</span>,<span class="number">70</span>,<span class="string">'教授'</span>,<span class="number">1000</span>,<span class="number">1500</span>,<span class="string">'d2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> T(tno,tn,sex,age,prof,sal,comm,dno) <span class="keyword">VALUES</span>(<span class="string">'t3'</span>,<span class="string">'王五'</span>,<span class="string">'男'</span>,<span class="number">50</span>,<span class="string">'讲师'</span>,<span class="number">800.2</span>,<span class="number">1200.3</span>,<span class="string">'d3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> T(tno,tn,sex,age,prof,sal,comm,dno) <span class="keyword">VALUES</span>(<span class="string">'t4'</span>,<span class="string">'李四'</span>,<span class="string">'女'</span>,<span class="number">21</span>,<span class="string">'助教'</span>,<span class="number">8000.11</span>,<span class="number">12000.22</span>,<span class="string">'d4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> T(tno,tn,sex,age,prof,sal,comm,dno) <span class="keyword">VALUES</span>(<span class="string">'t5'</span>,<span class="string">'王六'</span>,<span class="string">'男'</span>,<span class="number">50</span>,<span class="string">'讲师'</span>,<span class="number">800.2</span>,<span class="number">1200.3</span>,<span class="string">'d3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> T(tno,tn,sex,age,prof,sal,comm,dno) <span class="keyword">VALUES</span>(<span class="string">'t6'</span>,<span class="string">'赵琦'</span>,<span class="string">'男'</span>,<span class="number">50</span>,<span class="string">'讲师'</span>,<span class="number">800.2</span>,<span class="number">1200.3</span>,<span class="string">'d2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> T(tno,tn,sex,age,prof,sal,comm,dno) <span class="keyword">VALUES</span>(<span class="string">'t7'</span>,<span class="string">'孙凯'</span>,<span class="string">'男'</span>,<span class="number">50</span>,<span class="string">'讲师'</span>,<span class="number">800.2</span>,<span class="number">1200.3</span>,<span class="string">'d1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> S <span class="keyword">VALUES</span>(<span class="string">'s1'</span>,<span class="string">'高令平'</span>,<span class="string">'女'</span>,<span class="number">40</span>,<span class="string">'d1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> S <span class="keyword">VALUES</span>(<span class="string">'s2'</span>,<span class="string">'张明喜'</span>,<span class="string">'男'</span>,<span class="number">15</span>,<span class="string">'d2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> S <span class="keyword">VALUES</span>(<span class="string">'s3'</span>,<span class="string">'李福鑫'</span>,<span class="string">'男'</span>,<span class="number">26</span>,<span class="string">'d3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> S <span class="keyword">VALUES</span>(<span class="string">'s4'</span>,<span class="string">'乔杉扮'</span>,<span class="string">'男'</span>,<span class="number">26</span>,<span class="string">'d4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> S <span class="keyword">VALUES</span>(<span class="string">'s5'</span>,<span class="string">'李金成'</span>,<span class="string">'男'</span>,<span class="number">26</span>,<span class="string">'d3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> S <span class="keyword">VALUES</span>(<span class="string">'s6'</span>,<span class="string">'赵贤帅'</span>,<span class="string">'女'</span>,<span class="number">26</span>,<span class="string">'d2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> S <span class="keyword">VALUES</span>(<span class="string">'s7'</span>,<span class="string">'高德晨'</span>,<span class="string">'男'</span>,<span class="number">26</span>,<span class="string">'d1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> S <span class="keyword">VALUES</span>(<span class="string">'s8'</span>,<span class="string">'凡凡'</span>,<span class="string">'女'</span>,<span class="number">26</span>,<span class="string">'d2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> C(cno,cn,ct) <span class="keyword">VALUES</span>(<span class="string">'c1'</span>,<span class="string">'数据库'</span>,<span class="number">32</span>);</span><br><span class="line"><span class="keyword">INSERT</span> C(cno,cn,ct) <span class="keyword">VALUES</span>(<span class="string">'c2'</span>,<span class="string">'大物'</span>,<span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> C(cno,cn,ct) <span class="keyword">VALUES</span>(<span class="string">'c3'</span>,<span class="string">'web'</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">INSERT</span> C(cno,cn,ct) <span class="keyword">VALUES</span>(<span class="string">'c4'</span>,<span class="string">'英语'</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">INSERT</span> C(cno,cn,ct) <span class="keyword">VALUES</span>(<span class="string">'c5'</span>,<span class="string">'语文'</span>,<span class="number">78</span>);</span><br><span class="line"><span class="keyword">INSERT</span> C(cno,cn,ct) <span class="keyword">VALUES</span>(<span class="string">'c6'</span>,<span class="string">'化学'</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">INSERT</span> C(cno,cn,ct) <span class="keyword">VALUES</span>(<span class="string">'c7'</span>,<span class="string">'高数'</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> C(cno,cn,ct) <span class="keyword">VALUES</span>(<span class="string">'c8'</span>,<span class="string">'生物'</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> SC(sno,cno,score) <span class="keyword">VALUES</span>(<span class="string">'s1'</span>,<span class="string">'c1'</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> SC(sno,cno,score) <span class="keyword">VALUES</span>(<span class="string">'s2'</span>,<span class="string">'c2'</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> SC(sno,cno,score) <span class="keyword">VALUES</span>(<span class="string">'s3'</span>,<span class="string">'c3'</span>,<span class="number">50.4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> SC <span class="keyword">VALUES</span>(<span class="string">'s4'</span>,<span class="string">'c4'</span>,<span class="number">111</span>);</span><br><span class="line"><span class="keyword">INSERT</span> SC <span class="keyword">VALUES</span>(<span class="string">'s5'</span>,<span class="string">'c5'</span>,<span class="number">60</span>);</span><br><span class="line"><span class="keyword">INSERT</span> SC <span class="keyword">VALUES</span>(<span class="string">'s6'</span>,<span class="string">'c6'</span>,<span class="number">66</span>);</span><br><span class="line"><span class="keyword">INSERT</span> SC(sno,cno,score) <span class="keyword">VALUES</span>(<span class="string">'s7'</span>,<span class="string">'c7'</span>,<span class="number">50.4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> TC(tno,cno) <span class="keyword">VALUES</span>(<span class="string">'t1'</span>,<span class="string">'c1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> TC(tno,cno) <span class="keyword">VALUES</span>(<span class="string">'t2'</span>,<span class="string">'c2'</span>);</span><br><span class="line"><span class="keyword">insert</span> TC <span class="keyword">values</span>(<span class="string">'t3'</span>,<span class="string">'c3'</span>);</span><br><span class="line"><span class="keyword">insert</span> TC <span class="keyword">values</span>(<span class="string">'t4'</span>,<span class="string">'c4'</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Insert-amp-Update-amp-Delete"><a href="#Insert-amp-Update-amp-Delete" class="headerlink" title="Insert &amp; Update &amp; Delete"></a>Insert &amp; Update &amp; Delete</h4><ol><li>向数据库的每张用户表（除SC表）中至少添加3条元组，其中S表中插入2位计算机专业的同学，一位非计算机专业的同学。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> S(sno,sn,dno,sex) <span class="keyword">values</span>(<span class="string">'s20'</span>,<span class="string">'王志刚'</span>,<span class="string">'d1'</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> S(sno,sn,dno,sex) <span class="keyword">values</span>(<span class="string">'s21'</span>,<span class="string">'王志'</span>,<span class="string">'d3'</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> S(sno,sn,dno,sex) <span class="keyword">values</span>(<span class="string">'s22'</span>,<span class="string">'张明欣'</span>,<span class="string">'d1'</span>,<span class="string">'男'</span>);</span><br></pre></td></tr></table></figure></li><li>向SC表中插入选课记录，为计算机专业的同学选上全部课程，成绩取值为空值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> SC(sno,cno) <span class="keyword">values</span>(<span class="string">'s20'</span>,<span class="string">'c1'</span>);</span><br><span class="line"><span class="keyword">insert</span> SC(sno,cno) <span class="keyword">values</span>(<span class="string">'s20'</span>,<span class="string">'c2'</span>);</span><br><span class="line"><span class="keyword">insert</span> SC(sno,cno) <span class="keyword">values</span>(<span class="string">'s20'</span>,<span class="string">'c5'</span>);</span><br><span class="line"><span class="keyword">insert</span> SC(sno,cno) <span class="keyword">values</span>(<span class="string">'s20'</span>,<span class="string">'001'</span>);</span><br><span class="line"><span class="keyword">insert</span> SC(sno,cno) <span class="keyword">values</span>(<span class="string">'s22'</span>,<span class="string">'c1'</span>);</span><br><span class="line"><span class="keyword">insert</span> SC(sno,cno) <span class="keyword">values</span>(<span class="string">'s22'</span>,<span class="string">'c2'</span>);</span><br><span class="line"><span class="keyword">insert</span> SC(sno,cno) <span class="keyword">values</span>(<span class="string">'s22'</span>,<span class="string">'c5'</span>);</span><br><span class="line"><span class="keyword">insert</span> SC(sno,cno) <span class="keyword">values</span>(<span class="string">'s22'</span>,<span class="string">'001'</span>);</span><br></pre></td></tr></table></figure></li><li>将课时大于等于80学时的课程全部改为72学时。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> C <span class="keyword">set</span> ct=<span class="number">72</span> <span class="keyword">where</span> ct&gt;=<span class="number">80</span>;</span><br></pre></td></tr></table></figure></li><li>删除成绩为空值的选课记录。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> SC <span class="keyword">where</span> score <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li>删除姓名为刘伟的老师的授课记录。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> TC <span class="keyword">where</span> tno <span class="keyword">in</span>(<span class="keyword">select</span> tno <span class="keyword">from</span> T <span class="keyword">where</span> tn=<span class="string">'刘伟'</span>);</span><br></pre></td></tr></table></figure></li><li>调整岗位津贴，教授岗贴增长10%，副教授岗贴增长20%，讲师岗贴增长30%。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> T <span class="keyword">set</span> comm=comm*<span class="keyword">CASE</span> prof </span><br><span class="line"><span class="keyword">when</span> <span class="string">'教授'</span> <span class="keyword">then</span> <span class="number">1.1</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">'副教授'</span> <span class="keyword">then</span> <span class="number">1.2</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">'讲师'</span> <span class="keyword">then</span> <span class="number">1.3</span></span><br><span class="line"><span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li>将基本工资低于平均基本工资的教师的工资增长10%。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> T <span class="keyword">set</span> Sal = Sal*<span class="number">1.1</span> <span class="keyword">where</span> Sal &lt; (<span class="keyword">select</span> <span class="keyword">AVG</span>(Sal)<span class="keyword">from</span> T);</span><br></pre></td></tr></table></figure></li><li>将基本工资低于同职称教师基本工资的教师工资增长10%。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> T <span class="keyword">set</span> Sal=Sal*<span class="number">1.1</span> <span class="keyword">where</span> Sal &lt; (<span class="keyword">select</span> <span class="keyword">AVG</span>(Sal) <span class="keyword">from</span> T t1 <span class="keyword">where</span> t1.prof=T.prof);</span><br></pre></td></tr></table></figure></li><li>将有授课记录的老师的工资提高百分之十。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> T <span class="keyword">set</span> Sal=Sal*<span class="number">1.1</span> <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> tno <span class="keyword">from</span> TC <span class="keyword">where</span> TC.tno = T.tno);</span><br></pre></td></tr></table></figure></li><li>修改S表中一位已经选过课的学生的学号（例如：学号从11223344改为111）。<br>①. 先将SC表中sno原有的外键约束删除，<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--alter alter table SC drop constraint 外键约束名</span></span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> SC <span class="keyword">drop</span> <span class="keyword">constraint</span> FK__SC__sno__1FCDBCEB;</span><br></pre></td></tr></table></figure>然后在重新使用alter语句加入外键，并且设置级联。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">TABLE</span> SC <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> [FK_sc] <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (sno) <span class="keyword">REFERENCES</span> S(sno) <span class="keyword">ON</span> <span class="keyword">Update</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure>②. 使用数据库的增删改查实现数据的修改。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> <span class="comment">#S_1 from S where sno='11223344';</span></span><br><span class="line"><span class="keyword">update</span> <span class="comment">#S_1 set sno='111' where sno='11223344';</span></span><br><span class="line"><span class="keyword">insert</span> S <span class="keyword">select</span> *<span class="keyword">from</span> <span class="comment">#S_1;</span></span><br><span class="line"><span class="keyword">update</span> SC <span class="keyword">set</span> sno=<span class="string">'111'</span> <span class="keyword">where</span> sno=<span class="string">'11223344'</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> S <span class="keyword">where</span> sno=<span class="string">'11223344'</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><ol><li>查询学号s5的同学的姓名和所在系，将查询结果的列名显示为中文。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sn 姓名,dno 所在系 <span class="keyword">from</span> S <span class="keyword">where</span> sno=<span class="string">'s5'</span>;</span><br></pre></td></tr></table></figure></li><li>查询教过课程号为C2或C5的课程的教师的编号（写两个查询语句完成同样的功能）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> tno <span class="keyword">from</span> TC <span class="keyword">where</span> cno=<span class="string">'C2'</span> <span class="keyword">or</span> cno=<span class="string">'C5'</span>;</span><br><span class="line"><span class="keyword">select</span> tno <span class="keyword">from</span> TC <span class="keyword">where</span> cno <span class="keyword">in</span>(<span class="string">'C2'</span>,<span class="string">'C5'</span>);</span><br></pre></td></tr></table></figure></li><li>查询学号为S5的同学所学课程的平均成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">AVG</span>(score) 平均成绩 <span class="keyword">from</span> SC <span class="keyword">where</span> sno=<span class="string">'s5'</span>;</span><br></pre></td></tr></table></figure></li><li>查询选过课程号为C1的课程的人数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">COUNT</span>(*) <span class="keyword">from</span> SC <span class="keyword">where</span> cno=<span class="string">'C1'</span>;</span><br></pre></td></tr></table></figure></li><li>查询计算机系学生的最大年龄，显示系名和最大年龄（查询结果的每列都要有列名且为中文）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dn 系名,<span class="keyword">MAX</span>(age) 最大年龄 <span class="keyword">from</span> S <span class="keyword">join</span> D <span class="keyword">on</span> S.dno=D.dno <span class="keyword">where</span> dn=<span class="string">'计算机系'</span> <span class="keyword">Group</span> <span class="keyword">by</span> dn;</span><br></pre></td></tr></table></figure></li><li>查询所有教过课的老师的人数（教过多门课的同一位老师只计数1次）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">DISTINCT</span> tno) <span class="keyword">as</span> 教过课的教师人数 <span class="keyword">from</span> TC <span class="keyword">where</span> tno <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li>查询信息系年龄在30到39岁之间（包括30和39）的男老师人数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">COUNT</span>(*) <span class="keyword">from</span> T <span class="keyword">join</span> D <span class="keyword">on</span> T.dno=D.dno <span class="keyword">where</span> dn=<span class="string">'信息系'</span> <span class="keyword">and</span> age&gt;=<span class="number">30</span> <span class="keyword">and</span> age&lt;=<span class="number">39</span> <span class="keyword">and</span> sex=<span class="string">'男'</span>;</span><br></pre></td></tr></table></figure></li><li>查询选过课的各位学生的学号，选课门数和平均成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,<span class="keyword">count</span>(cno),<span class="keyword">AVG</span>(score) <span class="keyword">from</span> SC <span class="keyword">where</span> cno <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">group</span> <span class="keyword">by</span> sno;</span><br></pre></td></tr></table></figure></li><li>查询各系的名称和所属教师人数（查询结果的每列都要有列名且为中文）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dn 系名,<span class="keyword">COUNT</span>(tno) 教师人数 <span class="keyword">from</span> T <span class="keyword">join</span> D <span class="keyword">on</span> D.dno=T.dno <span class="keyword">group</span> <span class="keyword">by</span> dn;</span><br></pre></td></tr></table></figure></li><li>查询选课表中各门课的课程号，最高分，最低分和平均分（查询结果的每列都要有列名且为中文）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SC.cno 课程号,<span class="keyword">MAX</span>(score) 最高分,<span class="keyword">MIN</span>(score) 最低分,<span class="keyword">AVG</span>(score) 平均分 <span class="keyword">from</span> SC <span class="keyword">join</span> C <span class="keyword">on</span> SC.cno=C.cno <span class="keyword">group</span> <span class="keyword">by</span> SC.cno;</span><br></pre></td></tr></table></figure></li><li>查询计算机系女生的学生信息，按年龄的降序、学号的升序显示学生学号，姓名，年龄。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> S.sno 学号,sn 姓名,age 年龄, S.dno <span class="keyword">from</span> S <span class="keyword">join</span> D <span class="keyword">on</span> D.dno=S.dno <span class="keyword">where</span> dn=<span class="string">'计算机系'</span><span class="keyword">and</span> sex=<span class="string">'女'</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">DESC</span>,S.sno <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure></li><li>查询各职称的老师的职称，最高工资，最低工资，最高和最低工资间的差额，平均工资，按平均工资的降序显示上述信息（查询结果的每列都要有列名且为中文）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prof 职称,<span class="keyword">MAX</span>(comm) 最高工资,<span class="keyword">MIN</span>(comm) 最低工资,<span class="keyword">MAX</span>(comm)-<span class="keyword">MIN</span>(comm) 差额,<span class="keyword">AVG</span>(comm) 平均工资 <span class="keyword">from</span> T <span class="keyword">group</span> <span class="keyword">by</span> prof <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">AVG</span>(comm) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li><li>查询选修了C1和C2两门课的学生的学号。（使用连接和嵌套两种方式完成查询）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> S1.sno <span class="keyword">from</span> SC S1 <span class="keyword">join</span> SC S2 <span class="keyword">on</span> S1.sno=S2.sno <span class="keyword">where</span> S2.cno=<span class="string">'C1'</span> <span class="keyword">and</span> S1.cno=<span class="string">'C2'</span>;</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">where</span> cno =<span class="string">'C1'</span> <span class="keyword">and</span> sno <span class="keyword">in</span>(<span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">where</span> cno=<span class="string">'C2'</span>);</span><br></pre></td></tr></table></figure></li><li>查询计算机系所有学生选修信息，显示学生学号，课程号和成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> S.sno,cno,score <span class="keyword">from</span> S <span class="keyword">join</span> SC <span class="keyword">on</span> S.sno=SC.sno <span class="keyword">join</span> D <span class="keyword">on</span> S.dno=D.dno <span class="keyword">where</span> dn=<span class="string">'计算机系'</span>;</span><br></pre></td></tr></table></figure></li><li>查询所有教过课程号为C1的课程的老师姓名，职称，系别。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> tn,prof,dn <span class="keyword">from</span> T <span class="keyword">join</span> TC <span class="keyword">on</span> T.tno=TC.tno <span class="keyword">join</span> D <span class="keyword">on</span> D.dno=T.dno <span class="keyword">where</span> cno=<span class="string">'C1'</span>;</span><br></pre></td></tr></table></figure></li><li>查询具有教授和副教授职称的老师所教课程的编号和名称。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> C.cno,cn <span class="keyword">from</span> C <span class="keyword">join</span> TC <span class="keyword">on</span> C.cno=TC.cno <span class="keyword">join</span> T <span class="keyword">on</span> T.tno=TC.tno <span class="keyword">where</span> prof <span class="keyword">in</span>(<span class="string">'教授'</span>,<span class="string">'副教授'</span>);</span><br></pre></td></tr></table></figure></li><li>查询孙珊同学的成绩单，显示课程号，课程名和成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> C.cno,cn,score <span class="keyword">from</span> C <span class="keyword">join</span> SC <span class="keyword">on</span> C.cno=SC.cno <span class="keyword">join</span> S <span class="keyword">on</span> S.sno=SC.sno <span class="keyword">where</span> sn=<span class="string">'孙珊'</span>;</span><br></pre></td></tr></table></figure></li><li>查询选修了C1但没有选修C2课程的学生的学号。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">where</span> cno=<span class="string">'C1'</span> <span class="keyword">and</span> sno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">where</span> cno=<span class="string">'C2'</span>);</span><br></pre></td></tr></table></figure></li><li>查询计算机系学生选修过的课程编号和名称。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Distinct</span> C.cno,cn <span class="keyword">from</span> SC <span class="keyword">join</span> S <span class="keyword">on</span> S.sno=SC.sno <span class="keyword">join</span> C <span class="keyword">on</span> C.cno=SC.cno <span class="keyword">join</span> D <span class="keyword">on</span> D.dno=S.dno <span class="keyword">where</span> dn=<span class="string">'计算机系'</span>;</span><br></pre></td></tr></table></figure></li><li>查询所有没有选修过任何课程的学生的学号和姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> S.sno,sn,dno <span class="keyword">from</span> S <span class="keyword">left</span> <span class="keyword">join</span> SC <span class="keyword">on</span> S.sno=SC.sno <span class="keyword">where</span> cno <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li>查询教授课程门数超过3门的老师的编号和姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> T.tno,tn <span class="keyword">from</span> TC <span class="keyword">join</span> T <span class="keyword">on</span> T.tno=TC.tno <span class="keyword">group</span> <span class="keyword">by</span> T.tno,tn <span class="keyword">having</span> <span class="keyword">COUNT</span>(cno)&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li><li>查询选课表中出现过的不及格情况的学生编号，学生姓名及其不及格门数。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> S.sno 学生编号,sn 姓名,<span class="keyword">COUNT</span>(cno) 不及格门数 <span class="keyword">from</span> SC <span class="keyword">join</span> S <span class="keyword">on</span> S.sno=SC.sno <span class="keyword">where</span> score&lt;<span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> sn,S.sno;</span><br></pre></td></tr></table></figure></li></ol></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;Create-Database-and-Table&quot;&gt;&lt;a href=&quot;#Create-Database-and-Table&quot; class=&quot;headerlink&quot; title=&quot;Create Database and Table&quot;&gt;&lt;/a&gt;Create Database and Table&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建名称为数据库sch_id的数据库（其中ID为本人学号的后三位），并使用该数据库。&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;database&lt;/span&gt; [数据库sch_240];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Database" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Database/"/>
    
      <category term="SQL Server" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Database/SQL-Server/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Database/SQL-Server/Basis/"/>
    
    
      <category term="SQL" scheme="https://github.com/xtlei/xtlei.github.io/tags/SQL/"/>
    
      <category term="Create" scheme="https://github.com/xtlei/xtlei.github.io/tags/Create/"/>
    
      <category term="Insert" scheme="https://github.com/xtlei/xtlei.github.io/tags/Insert/"/>
    
      <category term="Update" scheme="https://github.com/xtlei/xtlei.github.io/tags/Update/"/>
    
      <category term="Delete" scheme="https://github.com/xtlei/xtlei.github.io/tags/Delete/"/>
    
  </entry>
  
  <entry>
    <title>SQL实践—Index&amp;View&amp;Proc&amp;Trigger</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/06/17/SQL%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0%E4%B9%8B%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/06/17/SQL%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0%E4%B9%8B%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%A7%A6%E5%8F%91%E5%99%A8/</id>
    <published>2020-06-17T07:30:37.000Z</published>
    <updated>2022-04-08T11:53:39.375Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="Index-amp-View"><a href="#Index-amp-View" class="headerlink" title="Index &amp; View"></a>Index &amp; View</h4><ol><li>定义视图V_TCS（定义时不加with check option），存放全部计算机系老师的信息。<a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> V_TCS </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> T.* <span class="keyword">from</span> T <span class="keyword">join</span> D <span class="keyword">on</span> T.dno=D.dno <span class="keyword">where</span> D.dn=<span class="string">'计算机系'</span>;</span><br><span class="line"><span class="comment">-- 视图查询语句：</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> V_TCS;</span><br></pre></td></tr></table></figure></li><li>定义视图V_sal，存放全体教师的教师号，姓名，教师酬金（工资+岗位津贴）和职称信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> V_sal</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> tno 教师号,tn 教师姓名,Sal+comm 教师酬金,prof 职称信息 <span class="keyword">from</span> T;</span><br><span class="line">go</span><br></pre></td></tr></table></figure></li><li>向V_TCS中插入一条计算机专业教师的新记录，并查询V_TCS视图的全部记录。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> V_TCS <span class="keyword">values</span>(<span class="string">'t8'</span>,<span class="string">'周杰'</span>,<span class="string">'男'</span>,<span class="string">'34'</span>,<span class="string">'教授'</span>,<span class="number">1000</span>,<span class="number">2000</span>,<span class="string">'d1'</span>);</span><br></pre></td></tr></table></figure></li><li>向V_TCS中插入一条信息专业教师的新记录，并查询V_TCS视图的全部记录。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> V_TCS <span class="keyword">values</span>(<span class="string">'t9'</span>,<span class="string">'奕迅'</span>,<span class="string">'男'</span>,<span class="string">'40'</span>,<span class="string">'讲师'</span>,<span class="number">1000</span>,<span class="number">2000</span>,<span class="string">'d3'</span>);</span><br></pre></td></tr></table></figure></li><li>修改V_TCS中的记录，使得编号为t22的教师的职称为副教授。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> V_TCS <span class="keyword">set</span> prof=<span class="string">'副教授'</span> <span class="keyword">where</span> tno=<span class="string">'t22'</span>;</span><br></pre></td></tr></table></figure></li><li>定义视图V_TCS_ck（定义时加with check option），存放全部计算机系老师的信息，对比该视图与V_TCS在进行数据更新时的差别。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> V_TCS_ck</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> T.* <span class="keyword">from</span> T <span class="keyword">join</span> D <span class="keyword">on</span> T.dno=D.dno <span class="keyword">where</span> D.dn=<span class="string">'计算机系'</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span>;</span><br><span class="line">go</span><br></pre></td></tr></table></figure></li></ol><ul><li>在插入时的对比<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- V_TCS_ck：无法插入别的系的老师信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> V_TCS_ck <span class="keyword">values</span>(<span class="string">'t10'</span>,<span class="string">'奕迅'</span>,<span class="string">'男'</span>,<span class="string">'40'</span>,<span class="string">'讲师'</span>,<span class="number">1000</span>,<span class="number">2000</span>,<span class="string">'d3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- V_TCS：可以插入其他系的老师信息，但是查询不出来其他系的老师信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> V_TCS <span class="keyword">values</span>(<span class="string">'t12'</span>,<span class="string">'奕迅'</span>,<span class="string">'男'</span>,<span class="string">'40'</span>,<span class="string">'讲师'</span>,<span class="number">1000</span>,<span class="number">2000</span>,<span class="string">'d3'</span>);</span><br></pre></td></tr></table></figure></li><li>在更新时的对比<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- V_TCS_ck：无法将老师信息更新为其他系</span></span><br><span class="line"><span class="keyword">update</span> V_TCS_ck <span class="keyword">set</span> dno=<span class="string">'d3'</span> <span class="keyword">where</span> tno=<span class="string">'t8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- V_TCS：可以更新为其他系，但是查询视图时查不出该条信息</span></span><br><span class="line"><span class="keyword">update</span> V_TCS <span class="keyword">set</span> dno=<span class="string">'d3'</span> <span class="keyword">where</span> tno=<span class="string">'t8'</span>;</span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>在课程C表的课程名属性上按降序创建唯一索引I_cn。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> I_cn <span class="keyword">on</span> C(cn <span class="keyword">DESC</span>);</span><br></pre></td></tr></table></figure></li><li>删除C表上的索引I_cn。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> C.I_cn;</span><br></pre></td></tr></table></figure></li><li>定义SC_C1视图，存放所有选修了C1课程的学生的学号和姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> SC_C1</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> S.sno,sn <span class="keyword">from</span> S <span class="keyword">join</span> SC <span class="keyword">on</span> S.sno=SC.sno <span class="keyword">where</span> SC.cno=<span class="string">'c1'</span>;</span><br><span class="line">go</span><br></pre></td></tr></table></figure></li></ol><ul><li>插入时的受限情况：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 无法插入任何新的信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC_C1 <span class="keyword">values</span>(<span class="string">'s33'</span>,<span class="string">'毕福剑'</span>);</span><br><span class="line"><span class="comment">--（缺少原表不能为空的值，以向原表插入的信息格式插入会报错提供值得数目与表定义不匹配）</span></span><br><span class="line"><span class="comment">--不能将值NULL插入列'sex'，表'sch_240.dbo.S'；列不允许有Null值。INSERT失败。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC_C1 <span class="keyword">values</span>(<span class="string">'s34'</span>,<span class="string">'毕福剑'</span>,<span class="string">'男'</span>,<span class="number">23</span>,<span class="string">'d1'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="comment">--列名或所提供值的数目与表定义不匹配。</span></span><br></pre></td></tr></table></figure></li><li>更新时的受限情况：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> SC_C1 <span class="keyword">set</span> sno=<span class="string">'s9'</span> <span class="keyword">where</span> sno=<span class="string">'s1'</span>;</span><br><span class="line"><span class="keyword">update</span> SC_C1 <span class="keyword">set</span> sn=<span class="string">'毕福'</span> <span class="keyword">where</span> sno=<span class="string">'s1'</span>;</span><br><span class="line"><span class="comment">--（该视图来自选课表，其中sno是选课表参考学生表的外键，有外键约束，直接更新受限）</span></span><br><span class="line"><span class="keyword">UPDATE</span>语句与<span class="keyword">REFERENCE</span>约束<span class="string">"FK__SC__sno__4BAC3F29"</span>冲突。该冲突发生于数据库<span class="string">"sch_240"</span>，表<span class="string">"dbo.SC"</span>,<span class="keyword">column</span> <span class="string">'sno'</span>。</span><br></pre></td></tr></table></figure></li><li>删除时的受限情况：<br>视图或函数&#39;SC_C1&#39;不可更新，因为修改会影响多个基表。</li></ul><ol start="10"><li>定义一个C_score视图，存放各门课课程编号以及成绩的最大值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> C_score (课程号,课程最高分)</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> cno,<span class="keyword">MAX</span>(score) <span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cno</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>插入时的受限情况：<br>对视图或函数&#39;C_score&#39;的更新或插入失败，因其包含派生域或常量域。</li><li>更新时的受限情况：<br>因为视图或函数&#39;C_score&#39;包含聚合、DISTINCT或GROUP BY子句或者PIVOT或UNPIVOT运算符，所以无法进行更新。</li><li>删除时的受限情况：<br>因为视图或函数&#39;C_score&#39;包含聚合、DISTINCT或GROUP BY子句或者PIVOT或UNPIVOT运算符，所以无法进行更新。</li></ul><h4 id="Procedure-amp-Trigger"><a href="#Procedure-amp-Trigger" class="headerlink" title="Procedure &amp; Trigger"></a>Procedure &amp; Trigger</h4><p><strong>触发器的工作原理</strong><br>触发器建立在一个表或者视图之上，在数据发生更改时自动执行相关代码，以保证数据的完整性，比如在修改一个表的一个元组某个属性时，可能其他表某属性是该属性的外键，而修改后的内容是基本表没有的属性，这时外键表的属性没有随着基本表改变而产生错误，这时我们可以在基本表建立一个触发器，当进行修改属性值时，同时将外键表的值做相应的修改。</p><ol><li>创建存储过程JSXX_PROC，调用该存储过程时可显示各任课教师姓名及其所教课程名称。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc JSXX_PROC</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> tn,cn <span class="keyword">from</span> TC <span class="keyword">join</span> C <span class="keyword">on</span> TC.cno=C.cno <span class="keyword">join</span> T <span class="keyword">on</span> TC.tno=T.tno</span><br><span class="line"><span class="comment">-- 存储过程执行语句</span></span><br><span class="line">exec JSXX_PROC;</span><br></pre></td></tr></table></figure></li><li>创建存储过程XM_PROC，该存储过程可根据输入参数（学生姓名）查询并显示该学生的学号、所学课程名称和成绩；如果没有该姓名学生，则提示“无该姓名的同学”。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> XM_PROC</span><br><span class="line">@sn <span class="built_in">char</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> S <span class="keyword">where</span> sn=@sn)</span><br><span class="line"><span class="keyword">select</span> S.sno,cn,score <span class="keyword">from</span> SC <span class="keyword">join</span> C <span class="keyword">on</span> SC.cno=C.cno <span class="keyword">join</span> S <span class="keyword">on</span> S.sno=SC.sno <span class="keyword">where</span> sn=@sn</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">print <span class="string">'无该姓名的学生'</span></span><br></pre></td></tr></table></figure></li><li>创建存储过程XBNL_PROC，该存储过程可根据输入参数（专业名词，默认值为计算机专业），统计并显示该专业各年龄段男、女生人数。如果没有该专业，则显示“无此专业”。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> XBNL_PROC </span><br><span class="line">@dn <span class="built_in">char</span>(<span class="number">20</span>)=<span class="string">'计算机系'</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exists</span>(<span class="keyword">select</span> * <span class="keyword">from</span> D <span class="keyword">where</span> dn=@dn) </span><br><span class="line"><span class="keyword">select</span> age,<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sex=<span class="string">'男'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 男生人数,<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sex=<span class="string">'女'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 女生人数 </span><br><span class="line"><span class="keyword">from</span> S <span class="keyword">join</span> D <span class="keyword">on</span> s.dno=D.dno <span class="keyword">where</span> dn=@dn <span class="keyword">group</span> <span class="keyword">by</span> age</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">print <span class="string">'无此专业'</span></span><br></pre></td></tr></table></figure></li><li>分别查看XBNL_PROC存储过程的一般信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sp_helptext XBNL_PROC</span><br></pre></td></tr></table></figure></li><li>删除XM_PROC存储过程。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> proc XBNL_PROC</span><br></pre></td></tr></table></figure></li><li>创建触发器T_insertS，当向S表添加记录时，验证学生的班级号是否出现在B表中，如果不是则撤销S表添加记录的操作，如果学生的班号在班级表中则自动修改相应班级的人数字段值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> T_insertS <span class="keyword">on</span> S</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exists</span>(<span class="keyword">select</span> * <span class="keyword">from</span> inserted <span class="keyword">join</span> B <span class="keyword">on</span> B.bno=inserted.bno)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">update</span> B <span class="keyword">set</span> <span class="keyword">num</span>=<span class="keyword">num</span>+<span class="number">1</span> <span class="keyword">where</span> bno <span class="keyword">in</span> (<span class="keyword">select</span> bno <span class="keyword">from</span> inserted)</span><br><span class="line">  print <span class="string">'insert OK'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">rollback</span> <span class="keyword">transaction</span></span><br></pre></td></tr></table></figure></li><li>禁用T_insertS触发器语句。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable trigger T_insertS on S</span><br></pre></td></tr></table></figure></li><li>启用T_insertS触发器语句。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable trigger T_insertS on S</span><br></pre></td></tr></table></figure></li><li>创建触发器T_updateS，当修改S表一位同学的班级字段值时，验证学生的班级号是否出现在B表中，如果不是则撤销对S表中该条记录的修改操作，如果修改后的班号在班级表中则自动修改相应班级的人数字段值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> T_updateS <span class="keyword">on</span> S</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exists</span>(<span class="keyword">select</span> * <span class="keyword">from</span> inserted <span class="keyword">join</span> B <span class="keyword">on</span> B.bno=inserted.bno)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">update</span> B <span class="keyword">set</span> <span class="keyword">num</span>=<span class="keyword">num</span>+<span class="number">1</span> <span class="keyword">where</span> bno <span class="keyword">in</span>(<span class="keyword">select</span> bno <span class="keyword">from</span> inserted)</span><br><span class="line"><span class="keyword">update</span> B <span class="keyword">set</span> <span class="keyword">num</span>=<span class="keyword">num</span><span class="number">-1</span> <span class="keyword">where</span> bno <span class="keyword">in</span> (<span class="keyword">select</span> bno <span class="keyword">from</span> deleted) </span><br><span class="line">print <span class="string">'update OK'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">transaction</span></span><br></pre></td></tr></table></figure></li><li>请定义一个视图V_T，该视图体现了职称是副教授的老师的编号、姓名、性别和所教课程编号、课程名的信息。尝试对视图V_T进行数据插入，例如，插入编号为t111的男教师李晨副教授讲授编号为c11的“信息安全”课的信息，观察是否能成功。请自行编写一个该视图的触发器，使得定义触发器后，用户可以对视图V_T进行上述数据记录的插入。注意：所插入的教师和课程可能从未出现在教师表和课程表中。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--视图创建：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> V_T</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> T.tno,tn,sex,C.cno,cn <span class="keyword">from</span> T <span class="keyword">join</span> TC <span class="keyword">on</span> TC.tno=T.tno <span class="keyword">join</span> C <span class="keyword">on</span> C.cno=TC.cno <span class="keyword">where</span> prof=<span class="string">'副教授'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--触发器创建：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> Trigger_V_T</span><br><span class="line"><span class="keyword">on</span> V_T instead <span class="keyword">of</span> <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> *<span class="keyword">from</span> C <span class="keyword">where</span> cno <span class="keyword">in</span>(<span class="keyword">select</span> cno <span class="keyword">from</span> inserted))</span><br><span class="line"><span class="keyword">insert</span> C(cno,cn) <span class="keyword">select</span> cno,cn <span class="keyword">from</span> inserted</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> *<span class="keyword">from</span> T <span class="keyword">where</span> tno <span class="keyword">in</span>(<span class="keyword">select</span> tno <span class="keyword">from</span> inserted))</span><br><span class="line"><span class="keyword">insert</span> T(tno,tn,sex) <span class="keyword">select</span> tno,tn,sex <span class="keyword">from</span> inserted</span><br><span class="line"><span class="keyword">update</span> T <span class="keyword">set</span> prof=<span class="string">'副教授'</span> <span class="keyword">where</span> tno <span class="keyword">in</span>(<span class="keyword">select</span> tno <span class="keyword">from</span> inserted)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> T.tno,C.cno <span class="keyword">from</span> TC <span class="keyword">join</span> T <span class="keyword">on</span> T.tno=TC.tno <span class="keyword">join</span> C <span class="keyword">on</span> C.cno=TC.cno <span class="keyword">where</span> TC.tno <span class="keyword">in</span> (<span class="keyword">select</span> tno <span class="keyword">from</span> inserted))</span><br><span class="line"><span class="keyword">insert</span> TC(tno,cno) <span class="keyword">select</span> tno,cno <span class="keyword">from</span> inserted</span><br></pre></td></tr></table></figure></li></ol></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;Index-amp-View&quot;&gt;&lt;a href=&quot;#Index-amp-View&quot; class=&quot;headerlink&quot; title=&quot;Index &amp;amp; View&quot;&gt;&lt;/a&gt;Index &amp;amp; View&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;定义视图V_TCS（定义时不加with check option），存放全部计算机系老师的信息。&lt;/li&gt;&lt;/ol&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Database" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Database/"/>
    
      <category term="SQL Server" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Database/SQL-Server/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Database/SQL-Server/Basis/"/>
    
    
      <category term="SQL" scheme="https://github.com/xtlei/xtlei.github.io/tags/SQL/"/>
    
      <category term="Index" scheme="https://github.com/xtlei/xtlei.github.io/tags/Index/"/>
    
      <category term="View" scheme="https://github.com/xtlei/xtlei.github.io/tags/View/"/>
    
      <category term="Procedure" scheme="https://github.com/xtlei/xtlei.github.io/tags/Procedure/"/>
    
      <category term="Trigger" scheme="https://github.com/xtlei/xtlei.github.io/tags/Trigger/"/>
    
  </entry>
  
  <entry>
    <title>Python中=、copy()和deepcopy()的区别</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%AD=%E3%80%81copy()%E5%92%8Cdeepcopy()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%AD=%E3%80%81copy()%E5%92%8Cdeepcopy()%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-03-31T07:05:24.000Z</published>
    <updated>2022-04-07T13:15:17.858Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><ul><li><strong>数值，字符串str，元组tuple类型变量为静态变量（不可变对象）。</strong>    </li><li><strong>列表list，字典dict，集合set类型变量为动态变量（可变对象）。</strong> <a id="more"></a></li></ul><p><strong>直接赋值</strong>：对象的引用（别名）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a, b为数值类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为字符串（str）类型</span></span><br><span class="line">a = <span class="string">'abcdefg'</span></span><br><span class="line">b = a</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为元组（tuple）类型</span></span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = a</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为列表（list）类型</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># Ture</span></span><br><span class="line">a.append(<span class="number">5</span>)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为集合（set）类型</span></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = a</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># Ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为字典（dict）类型</span></span><br><span class="line">a = &#123;<span class="number">1</span>: <span class="string">'aaa'</span>, <span class="number">2</span>: <span class="string">'bbb'</span>, <span class="number">3</span>: <span class="string">"ccc"</span>&#125;</span><br><span class="line">b = a</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># Ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为含子对象的组合类型</span></span><br><span class="line">a =&#123;<span class="string">'l'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="string">"i"</span>: <span class="number">11</span>&#125;</span><br><span class="line">b = a</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># Ture</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">'l'</span>][<span class="number">0</span>] = <span class="number">11</span></span><br><span class="line">a[<span class="string">'i'</span>] = <span class="number">12</span></span><br><span class="line">print(a)  <span class="comment"># &#123;'l': [11, 2, 3, 4, 5], 'i': 12&#125;</span></span><br><span class="line">print(b)  <span class="comment"># &#123;'l': [11, 2, 3, 4, 5], 'i': 12&#125;</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><strong>copy</strong>：copy模块的copy()方法拷贝组合对象时，拷贝父对象，不会拷贝对象的内部的子对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="comment"># a, b为数值类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为字符串（str）类型</span></span><br><span class="line">a = <span class="string">'abcdefg'</span></span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为元组（tuple）类型</span></span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为列表（list）类型</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为集合（set）类型</span></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为字典（dict）类型</span></span><br><span class="line">a = &#123;<span class="number">1</span>: <span class="string">'aaa'</span>, <span class="number">2</span>: <span class="string">'bbb'</span>, <span class="number">3</span>: <span class="string">"ccc"</span>&#125;</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为含子对象的组合类型</span></span><br><span class="line">a =&#123;<span class="string">'l'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="string">"i"</span>: <span class="number">11</span>&#125;</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">'l'</span>][<span class="number">0</span>] = <span class="number">11</span></span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a)  <span class="comment"># &#123;'l': [11, 2, 3, 4, 5], 'i': 11&#125;</span></span><br><span class="line">print(b)  <span class="comment"># &#123;'l': [11, 2, 3, 4, 5], 'i': 11&#125;</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line">print(a[<span class="string">'l'</span>] <span class="keyword">is</span> b[<span class="string">'l'</span>])  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">'i'</span>] = <span class="number">12</span></span><br><span class="line">print(a == b)  <span class="comment"># False</span></span><br><span class="line">print(a)  <span class="comment"># &#123;'l': [11, 2, 3, 4, 5], 'i': 12&#125;</span></span><br><span class="line">print(b)  <span class="comment"># &#123;'l': [11, 2, 3, 4, 5], 'i': 11&#125;</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># Flase</span></span><br><span class="line">print(a[<span class="string">'l'</span>] <span class="keyword">is</span> b[<span class="string">'l'</span>])  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><strong>deepcopy</strong>：copy模块的deepcopy()方法处理含子对象的组合变量时，完全拷贝了父对象及其子对象。深拷贝会完全复制原变量相关的所有数据，在内存中生成完全一样的内容，在这个过程中对这两个变量中的一个进行任意修改都不会影响其他变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="comment"># a, b为数值类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为字符串（str）类型</span></span><br><span class="line">a = <span class="string">'abcdefg'</span></span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为元组（tuple）类型</span></span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为列表（list）类型</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为集合（set）类型</span></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为字典（dict）类型</span></span><br><span class="line">a = &#123;<span class="number">1</span>: <span class="string">'aaa'</span>, <span class="number">2</span>: <span class="string">'bbb'</span>, <span class="number">3</span>: <span class="string">"ccc"</span>&#125;</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为含子对象的组合类型</span></span><br><span class="line">a =&#123;<span class="string">'l'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="string">"i"</span>: <span class="number">11</span>&#125;</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">'l'</span>][<span class="number">0</span>] = <span class="number">11</span></span><br><span class="line">print(a == b)  <span class="comment"># False</span></span><br><span class="line">print(a)  <span class="comment"># &#123;'l': [11, 2, 3, 4, 5], 'i': 11&#125;</span></span><br><span class="line">print(b)  <span class="comment"># &#123;'l': [1, 2, 3, 4, 5], 'i': 11&#125;</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line">print(a[<span class="string">'l'</span>] <span class="keyword">is</span> b[<span class="string">'l'</span>])  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">'i'</span>] = <span class="number">12</span></span><br><span class="line">print(a == b)  <span class="comment"># False</span></span><br><span class="line">print(a)  <span class="comment"># &#123;'l': [11, 2, 3, 4, 5], 'i': 12&#125;</span></span><br><span class="line">print(b)  <span class="comment"># &#123;'l': [1, 2, 3, 4, 5], 'i': 11&#125;</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># Flase</span></span><br><span class="line">print(a[<span class="string">'l'</span>] <span class="keyword">is</span> b[<span class="string">'l'</span>])  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>变量的赋值均为引用（传址）。</li><li>变量的copy()过程中不明确区分拷贝（传值）和引用（传址）。一般对静态变量的copy为引用（传址），对动态变量的copy为拷贝（传值）；</li><li>变量的deepcopy()在对一般静态变量和动态变量的处理上和copy()相同。</li><li>静态变量有时存在组合现象，比如字典中包含列表，列表中包含字典，但其数据类型是最外层类型，对变量的处理也遵循该数据类型。与非组合类型的区别在于对子对象的处理：deepcopy()拷贝（传值）子对象，而copy()对子对象引用（传址）。<ul><li>b = a：赋值引用，a和b都指向同一个对象。<img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py17-1.png" alt=" "></li><li>b = copy.copy(a)：浅拷贝，a和b是独立的对象，但其子对象指向同一对象（引用）。<img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py17-2.png" alt=" "></li><li>b = copy.deepcopy(a)：深度拷贝，a和b完全拷贝了父对象及其子对象，两者完全独立。<img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py17-3.png" alt=" "></li></ul></li></ul></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;

&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数值，字符串str，元组tuple类型变量为静态变量（不可变对象）。&lt;/strong&gt;    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列表list，字典dict，集合set类型变量为动态变量（可变对象）。&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Basis/"/>
    
    
      <category term="Python基础" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="=" scheme="https://github.com/xtlei/xtlei.github.io/tags//"/>
    
      <category term="copy()" scheme="https://github.com/xtlei/xtlei.github.io/tags/copy/"/>
    
      <category term="deepcopy()" scheme="https://github.com/xtlei/xtlei.github.io/tags/deepcopy/"/>
    
  </entry>
  
  <entry>
    <title>Python中is和==的区别</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADis%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADis%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-03-31T07:05:23.000Z</published>
    <updated>2022-04-07T09:08:06.417Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><p>Python中对象包含的三个基本要素：<strong>id(身份标识)</strong>、<strong>type(数据类型)</strong>和<strong>value(值)</strong>。</p><p>==是python标准操作符中的比较操作符，比较两个对象的value(值)是否相等，例如，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'cheesezh'</span></span><br><span class="line">b = <span class="string">'cheesezh'</span></span><br><span class="line">a == b  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><a id="more"></a>is运算符比较对象间的唯一身份标识，也就是id是否相同。例如，<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">z = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">x == y  <span class="comment"># True</span></span><br><span class="line">x <span class="keyword">is</span> y  <span class="comment"># True</span></span><br><span class="line">x == z  <span class="comment"># True</span></span><br><span class="line">x <span class="keyword">is</span> z  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">print(id(x))  <span class="comment"># 3075326572</span></span><br><span class="line">print(id(y))  <span class="comment"># 3075326572</span></span><br><span class="line">print(id(z))  <span class="comment"># 3075328140</span></span><br></pre></td></tr></table></figure><p>同一类型且赋值相同的a和b，a==b结果都为True，而a is b结果如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a, b为数值类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line">print(id(a) == id(b))  <span class="comment"># Ture</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为字符串（str）类型</span></span><br><span class="line">a = <span class="string">'abcdefg'</span></span><br><span class="line">b = <span class="string">'abcdefg'</span></span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line">print(id(a) == id(b))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为元组（tuple）类型</span></span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line">print(id(a) == id(b))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为列表（list）类型</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line">print(id(a) == id(b))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为集合（set）类型</span></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line">print(id(a) == id(b))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b为字典（dict）类型</span></span><br><span class="line">a = &#123;<span class="number">1</span>: <span class="string">'aaa'</span>, <span class="number">2</span>: <span class="string">'bbb'</span>, <span class="number">3</span>: <span class="string">"ccc"</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>: <span class="string">'aaa'</span>, <span class="number">2</span>: <span class="string">'bbb'</span>, <span class="number">3</span>: <span class="string">"ccc"</span>&#125;</span><br><span class="line">print(a == b)  <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line">print(id(a) == id(b))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><strong>同一类型且赋值相同的变量a和b，a==b结果为True，即a和b的value相同；</strong></li><li><strong>同一类型且赋值相同的变量a和b，当a和b的数据类型是数值、字符串str和元组tuple时，a is b为True，即id相同；当a和b的数据类型是列表list，字典dict或集合set时，a is b为False，即id不同。</strong></li><li><strong>同一类型且赋值相同的变量a和b，id相同则value相同，即a is b则a == b；value相同但id不一定相同，即a==b但a is b不一定为True。</strong></li><li><strong>定义两个相同大小的可变类型变量，内存开辟两个空间，分别存储两个值，所以两个变量value相同但id不同；定义两个相同大小的不可变类型的变量，内存只开辟一个空间存储值，两个变量引用同一个空间内的值，所以两个变量value和id都相同。</strong></li></ul></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;p&gt;Python中对象包含的三个基本要素：&lt;strong&gt;id(身份标识)&lt;/strong&gt;、&lt;strong&gt;type(数据类型)&lt;/strong&gt;和&lt;strong&gt;value(值)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;==是python标准操作符中的比较操作符，比较两个对象的value(值)是否相等，例如，&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&#39;cheesezh&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = &lt;span class=&quot;string&quot;&gt;&#39;cheesezh&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a == b  &lt;span class=&quot;comment&quot;&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Basis/"/>
    
    
      <category term="Python基础" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="is" scheme="https://github.com/xtlei/xtlei.github.io/tags/is/"/>
    
      <category term="==" scheme="https://github.com/xtlei/xtlei.github.io/tags//"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADdecorator%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADdecorator%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-03-31T07:05:22.000Z</published>
    <updated>2022-04-07T02:00:06.637Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-8.png" alt=" "><a id="more"></a></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-9.png" alt=" "></p><h4 id="无参decorator"><a href="#无参decorator" class="headerlink" title="无参decorator"></a>无参decorator</h4><p><strong>Python的decorator本质是一个高阶函数，它接收一个函数作为参数，返回一个新函数。</strong></p><p>Python提供<strong>@</strong>语法使用decorator，避免手动编写f = decorate(f)这样的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于阶乘函数，</span></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">call factorial()...</span><br><span class="line"><span class="number">3628800</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于参数不是一个的函数，调用将报错：</span></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">print</span> add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">TypeError: fn() takes exactly <span class="number">1</span> argument (<span class="number">2</span> given)</span><br></pre></td></tr></table></figure><p>因为add()函数需要传入两个参数，但是@log写死了只含一个参数的返回函数。<br>要让@log自适应任何参数定义的函数，可以利用Python的*args和**kw，保证任意个数的参数总是能正常调用，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">       <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">   <span class="keyword">return</span> fn</span><br></pre></td></tr></table></figure><h4 id="有参decorator"><a href="#有参decorator" class="headerlink" title="有参decorator"></a>有参decorator</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br></pre></td></tr></table></figure><p>对于被装饰的函数，log打印的语句是不能变的（除了函数名）。<br>如果有的函数非常重要，希望打印出&#39;[INFO] call xxx()…&#39;，有的函数不太重要，希望打印出&#39;[DEBUG] call xxx()…&#39;，这时，log函数本身就需要传入&#39;INFO&#39;或&#39;DEBUG&#39;这样的参数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log('DEBUG')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>把上面的定义翻译成高阶函数的调用，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_func = log(<span class="string">'DEBUG'</span>)(my_func)</span><br></pre></td></tr></table></figure><p>上面的语句看上去还是比较绕，再展开一下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_decorator = log(<span class="string">'DEBUG'</span>)</span><br><span class="line">my_func = log_decorator(my_func)</span><br></pre></td></tr></table></figure><p>上面的语句又相当于，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_decorator = log(<span class="string">'DEBUG'</span>)</span><br><span class="line"><span class="meta">@log_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>所以，带参数的log函数先返回一个decorator函数，再让这个decorator函数接收my_func并返回新函数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(prefix)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[%s] %s()...'</span> % (prefix, f.__name__)</span><br><span class="line">            <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> log_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('DEBUG')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">print</span> test()</span><br><span class="line"><span class="comment"># 执行结果：</span></span><br><span class="line"><span class="comment"># [DEBUG] test()...</span></span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure><p>对于这种3层嵌套的decorator定义，可以先把它拆开，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准decorator:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[%s] %s()...'</span> % (prefix, f.__name__)</span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="keyword">return</span> log_decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回decorator:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(prefix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> log_decorator(f)</span><br></pre></td></tr></table></figure><p>拆开以后会发现，调用会失败，因为在3层嵌套的decorator定义中，最内层的wrapper引用了最外层的参数prefix，所以，把一个闭包拆成普通的函数调用会比较困难。不支持闭包的编程语言要实现同样的功能就需要更多的代码</p><h4 id="完善decorator"><a href="#完善decorator" class="headerlink" title="完善decorator"></a>完善decorator</h4><p>@decorator可以动态实现函数功能的增加，但是，经过@decorator“改造”后的函数，和原函数相比，除了功能多一点外，有没有其它不同的地方？<br>在没有decorator的情况下，打印函数名，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">print</span> f1.__name__  <span class="comment"># f1</span></span><br></pre></td></tr></table></figure><p>有decorator的情况下，再打印函数名，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">print</span> f2.__name__  <span class="comment"># wrapper</span></span><br></pre></td></tr></table></figure><p>可见，由于decorator返回的新函数函数名已经不是&#39;f2&#39;，而是@log内部定义的&#39;wrapper&#39;。这对于那些依赖函数名的代码就会失效。decorator还改变了函数的<strong>doc</strong>等其它属性。如果要让调用者看不出一个函数经过了@decorator的“改造”，就需要把原函数的一些属性复制到新函数中，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    wrapper.__name__ = f.__name__</span><br><span class="line">    wrapper.__doc__ = f.__doc__</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>这样写decorator很不方便，因为很难把原函数的所有必要属性都一个一个复制到新函数上，所以Python内置的functools可以用来自动化完成这个“复制”的任务，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>最后需要指出，由于把原函数签名改成了(*args, **kw)，因此，无法获得原函数的原始参数信息。即便采用固定参数来装饰只有一个参数的函数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>也可能改变原函数的参数名，因为新函数的参数名始终是&#39;x&#39;，原函数定义的参数名不一定叫&#39;x&#39;。<br></p></font><p></p></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-8.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="Functional" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/Functional/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="decorator" scheme="https://github.com/xtlei/xtlei.github.io/tags/decorator/"/>
    
      <category term="装饰器" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python高阶函数</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</id>
    <published>2020-03-31T07:05:21.000Z</published>
    <updated>2022-04-05T07:14:16.325Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="函数式编程简介"><a href="#函数式编程简介" class="headerlink" title="函数式编程简介"></a>函数式编程简介</h4><p><strong>函数式：functional，一种编程范式，与函数是完全不同的东西</strong>。<a id="more"></a><br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-1.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-2.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-3.png" alt=" "></p><h4 id="高阶函数简介"><a href="#高阶函数简介" class="headerlink" title="高阶函数简介"></a>高阶函数简介</h4><p><strong>高阶函数：能接收函数做参数的函数</strong>。<br>1.变量可以指向函数，函数名就是指向函数的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = abs</span><br><span class="line"><span class="keyword">print</span> (f(<span class="number">-12</span>))  <span class="comment"># 12</span></span><br></pre></td></tr></table></figure><p>2.函数的参数可以接收变量，所以一个函数可以接收另一个函数作为参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,f=abs)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"><span class="keyword">print</span> (add(<span class="number">1</span>,<span class="number">-1</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="keyword">print</span> (add(<span class="number">4</span>,<span class="number">9</span>,math.sqrt))  <span class="comment"># 5.0</span></span><br></pre></td></tr></table></figure><h4 id="Python中返回函数"><a href="#Python中返回函数" class="headerlink" title="Python中返回函数"></a>Python中返回函数</h4><p>Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数。注意区分返回函数和返回值，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myabs</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> abs   <span class="comment"># 返回函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myabs2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> abs(x)   <span class="comment"># 返回函数调用的结果，返回值是一个数值</span></span><br></pre></td></tr></table></figure><p>返回函数可以把一些计算延迟执行。例如，如果定义一个普通的求和函数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(lst)</span><br><span class="line"><span class="comment"># 调用calc_sum()函数时，将立刻计算并得到结果</span></span><br><span class="line">calc_sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])  <span class="comment"># 10</span></span><br><span class="line"><span class="comment">#如果返回一个函数，就可以“延迟计算”</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(lst)</span><br><span class="line">    <span class="keyword">return</span> lazy_sum</span><br><span class="line"><span class="comment"># 调用calc_sum()并没有计算出结果，而是返回函数</span></span><br><span class="line">f = calc_sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(f)  <span class="comment"># &lt;function lazy_sum at 0x1037bfaa0&gt;</span></span><br><span class="line"><span class="comment"># 对返回的函数进行调用时，才计算出结果:</span></span><br><span class="line">print(f())  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>由于可以返回函数，在后续代码里就可以决定到底要不要调用该函数。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><strong>在函数内部定义的函数和外部定义的函数是一样的，只是无法被外部访问</strong>。<br>例如，将g的定义移入函数f内部，防止其他代码调用g，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'f()...'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'g()...'</span></span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>但是，考察如下calc_sum函数,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(lst)</span><br><span class="line">    <span class="keyword">return</span> lazy_sum</span><br></pre></td></tr></table></figure><p>注意:发现没法把lazy_sum移到calc_sum的外部，因为它引用了calc_sum的参数lst。<br><strong>像这种内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）</strong>。<br>闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。举例如下,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 希望一次返回3个函数，分别计算1x1,2x2,3x3:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line">``</span><br><span class="line">f1()，f2()和f3()实际结果全部都是<span class="number">9</span>，而不是<span class="number">1</span>，<span class="number">4</span>，<span class="number">9</span>。原因就是当count()函数返回了<span class="number">3</span>个函数时，这<span class="number">3</span>个函数所引用的变量i的值已经变成了<span class="number">3</span>。由于f1、f2、f3并没有被调用，所以，此时他们并未计算i*i，当f1被调用时，</span><br><span class="line">​```Python</span><br><span class="line">print(f1())  <span class="comment"># 9     因为f1现在才计算i*i，但现在i的值已经变为3</span></span><br></pre></td></tr></table></figure><p>第一步：执行代码“f1, f2, f3 = count()”赋值号的右边，调用count()函数，开始执行count()函数的内部命令<br>第二步：创建一个局部变量fs<br>第三步：开始执行for循环遍历列表[1,2,3]，i赋值1，然后执行fs.append(f)代码，得到[f]，注意这时候并不需要执行函数f()，因为没有调用<br>第四步：继续执行for循环遍历列表[1,2,3]，i赋值2，然后执行fs.append(f)代码，得到[f,f]，注意这时候并不需要执行函数f()，因为没有调用<br>第五步：继续执行for循环遍历列表[1,2,3]，i赋值3，然后执行fs.append(f)代码，得到[f,f,f]，注意这时候并不需要执行函数f()，因为没有调用<br>第六步：执行代码“f1, f2, f3 = count()”赋值号的左边，将fs（即[f,f,f])赋值给f1，f2，f3，使用到了高级序列赋值语句模式<br>第七步：执行print (f1(),f2(),f3())代码<br>第八步：调用函数f()，执行return i<em>i，此时的i的地址值指向的是外层函数中i的地址，i的值应为for之前的for循环重新赋值为3，所以return 3</em>3<br>因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-5.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-6.png" alt=" "></p><p>在Python中，对匿名函数提供了有限支持。以map()函数为例，计算 f(x)=x2时，除了定义一个f(x)的函数外，还可以直接传入匿名函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><p>通过对比可以看出，匿名函数lambda x: x * x实际上就是,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><p><strong>关键字lambda表示匿名函数，冒号前面的x表示函数参数</strong>。<br><strong>匿名函数只能有一个表达式，不写return，返回值就是该表达式的结果</strong>。<br><strong>使用匿名函数，可以不必定义函数名，直接创建一个函数对象</strong>，可以简化代码，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>], <span class="keyword">lambda</span> x,y: -cmp(x,y))  <span class="comment"># [9, 5, 3, 1, 0]</span></span><br></pre></td></tr></table></figure><p><strong>返回函数的时候，也可以返回匿名函数</strong>，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myabs = <span class="keyword">lambda</span> x: -x <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> x </span><br><span class="line">myabs(<span class="number">-1</span>)  <span class="comment"># 1</span></span><br><span class="line">myabs(<span class="number">1</span>)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py16-7.png" alt=" "></p><h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><p>当一个函数有很多参数时，调用者就需要提供多个参数。如果减少参数个数，就可以简化调用者的负担。<br>比如，int()函数可以把字符串转换为整数，当仅传入字符串时，int()函数默认按十进制转换，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(int(<span class="string">'12345'</span>))  <span class="comment"># 12345</span></span><br></pre></td></tr></table></figure><p>但int()函数还提供额外的base参数，默认值为10。如果传入base参数，就可以做N进制的转换，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(int(<span class="string">'12345'</span>, base=<span class="number">8</span>))  <span class="comment"># 5349</span></span><br><span class="line">print(int(<span class="string">'12345'</span>, <span class="number">16</span>))  <span class="comment"># 74565</span></span><br></pre></td></tr></table></figure><p>假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，可以定义一个int2()的函数，默认把base=2传进去，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(x, base)</span><br><span class="line"></span><br><span class="line">print(int2(<span class="string">'1000000'</span>))  <span class="comment"># 64</span></span><br><span class="line">print(int2(<span class="string">'1010101'</span>))  <span class="comment"># 85</span></span><br></pre></td></tr></table></figure><p><strong>functools.partial用来创建偏函数</strong>，不需要自己定义int2()，可以直接使用下面的代码创建一个新的函数int2，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line">int2(<span class="string">'1000000'</span>)  <span class="comment"># 64</span></span><br><span class="line">int2(<span class="string">'1010101'</span>)  <span class="comment"># 85</span></span><br></pre></td></tr></table></figure><p>所以，functools.partial可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值。<br></p></font><p></p></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;函数式编程简介&quot;&gt;&lt;a href=&quot;#函数式编程简介&quot; class=&quot;headerlink&quot; title=&quot;函数式编程简介&quot;&gt;&lt;/a&gt;函数式编程简介&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;函数式：functional，一种编程范式，与函数是完全不同的东西&lt;/strong&gt;。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="Functional" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/Functional/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="高阶函数" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
      <category term="函数式编程" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="闭包" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="返回函数" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0/"/>
    
      <category term="偏函数" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    
      <category term="匿名函数" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python特殊方法</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/</id>
    <published>2020-03-31T07:05:20.000Z</published>
    <updated>2022-04-05T07:14:07.283Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="特殊方法简介"><a href="#特殊方法简介" class="headerlink" title="特殊方法简介"></a>特殊方法简介</h4><p>Python之所以能把把任意变量变成str输出，因为任何数据类型的实例都有一个特殊方法<strong>str</strong>()。<a id="more"></a><br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-16.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-17.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-18.png" alt=" "></p><h4 id="常用特殊方法举例"><a href="#常用特殊方法举例" class="headerlink" title="常用特殊方法举例"></a>常用特殊方法举例</h4><h5 id="str"><a href="#str" class="headerlink" title="__str()__"></a>__str()__</h5><p>如果要把一个类的实例变成str，需要实现特殊方法__str__()，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(Person: %s, %s)'</span> % (self.name, self.gender)</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Bob'</span>, <span class="string">'male'</span>)</span><br><span class="line">print(p)  <span class="comment"># (Person: Bob, male)</span></span><br></pre></td></tr></table></figure><h5 id="cmp"><a href="#cmp" class="headerlink" title="__cmp()__"></a>__cmp()__</h5><p>对int、str等内置数据类型排序时，Python的sorted()函数按照默认的比较函数cmp排序，但是，如果对一组Student类的实例排序时，就必须实现特殊方法__cmp__()，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(%s: %s)'</span> % (self.name, self.score)</span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.name &lt; s.name:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">elif</span> self.name &gt; s.name:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">L = [Student(<span class="string">'Tim'</span>, <span class="number">99</span>), Student(<span class="string">'Bob'</span>, <span class="number">88</span>), Student(<span class="string">'Alice'</span>, <span class="number">77</span>)]</span><br><span class="line"><span class="keyword">print</span> sorted(L)  <span class="comment"># [(Alice: 77), (Bob: 88), (Tim: 99)]</span></span><br></pre></td></tr></table></figure><p>上述Student类实现了__cmp__()方法，__cmp__用实例自身self和传入的实例s进行比较，如果self应该排在前面，就返回-1，如果s应该排在前面，就返回1，如果两者相当，返回0。<br>注意: 如果list不仅仅包含Student类，则__cmp__可能会报错。<strong>Python3已经取消该函数</strong>。</p><h5 id="len"><a href="#len" class="headerlink" title="__len()__"></a>__len()__</h5><p>如果一个类表现得像一个list，要获取有多少个元素，就得用len()函数。要让len()函数工作正常，类必须提供一个特殊方法__len__()，它返回元素的个数。<br>例如，写一个Students类，把名字传进去，只要正确实现了__len__()方法，就可以用len()函数返回Students实例的“长度”,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        self.names = args</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.names)</span><br><span class="line"></span><br><span class="line">ss = Students(<span class="string">'Bob'</span>, <span class="string">'Alice'</span>, <span class="string">'Tim'</span>)</span><br><span class="line"><span class="keyword">print</span> len(ss)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h5 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a>__slots__</h5><p>由于Python是动态语言，任何实例在运行期都可以动态地添加属性。<br>如果要限制添加的属性，例如，Student类只允许添加name、gender和score这3个属性，可以利用Python的__slots__来实现。__slots__是指一个类允许的属性列表，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'gender'</span>, <span class="string">'score'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">59</span>)</span><br><span class="line">s.name = <span class="string">'Tim'</span> <span class="comment"># OK</span></span><br><span class="line">s.score = <span class="number">99</span> <span class="comment"># OK</span></span><br><span class="line">.grade = <span class="string">'A'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'grade'</span></span><br></pre></td></tr></table></figure><p><strong>__slots__的目的是限制当前类所能拥有的属性</strong>，如果不需要添加任意动态的属性，使用__slots__也能节省内存。<strong><strong>slots</strong>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</strong>。</p><h5 id="call"><a href="#call" class="headerlink" title="__call()__"></a>__call()__</h5><p>在Python中，函数其实是一个对象。如下，由于f可以被调用，所以，f被称为可调用对象。<strong>所有的函数都是可调用对象</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = abs</span><br><span class="line">print(f.__name__)  <span class="comment"># 'abs'</span></span><br><span class="line">print(f(<span class="number">-123</span>))  <span class="comment"># 123</span></span><br></pre></td></tr></table></figure><p>一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。该函数在调用类的实例时自动调用。把Person类变成一个可调用对象如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, friend)</span>:</span></span><br><span class="line">        print(<span class="string">'My name is %s...'</span> % self.name)</span><br><span class="line">        print(<span class="string">'My friend is %s...'</span> % friend)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以对Person实例直接调用：</span></span><br><span class="line">p = Person(<span class="string">'Bob'</span>, <span class="string">'male'</span>)</span><br><span class="line">p(<span class="string">'Tim'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># My name is Bob...</span></span><br><span class="line"><span class="comment"># My friend is Tim...</span></span><br></pre></td></tr></table></figure><p>单看p(&#39;Tim&#39;)无法确定p是一个函数还是一个类实例，所以，<strong>在Python中，函数也是对象，对象和函数的区别并不显著</strong>。<br></p></font><p></p></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;特殊方法简介&quot;&gt;&lt;a href=&quot;#特殊方法简介&quot; class=&quot;headerlink&quot; title=&quot;特殊方法简介&quot;&gt;&lt;/a&gt;特殊方法简介&lt;/h4&gt;&lt;p&gt;Python之所以能把把任意变量变成str输出，因为任何数据类型的实例都有一个特殊方法&lt;strong&gt;str&lt;/strong&gt;()。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="Object-oriented" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/Object-oriented/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="特殊方法" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python文件读写</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</id>
    <published>2020-03-31T07:05:19.000Z</published>
    <updated>2022-04-05T07:13:49.023Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="文件内容读取"><a href="#文件内容读取" class="headerlink" title="文件内容读取"></a>文件内容读取</h4><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-9.png" alt=" "></p><a id="more"></a><p>&lt;f&gt;.readline(size=-1) 读入文件一行，如果给定参数，输出文件前size行内容<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-10.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-11.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-12.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-13.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-14.png" alt=" "></p><h4 id="文件内容写入"><a href="#文件内容写入" class="headerlink" title="文件内容写入"></a>文件内容写入</h4><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-15.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-16.png" alt=" "></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"D:/test.txt"</span>, <span class="string">"w+"</span>)</span><br><span class="line">list = [<span class="string">'中国'</span>, <span class="string">'法国'</span>, <span class="string">'美国'</span>]</span><br><span class="line">fo.writelines(list)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    print(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>以上代码，创建文件test.txt，并写入内容“中国法国美国”，但是没有读取文件内容。因为在向文件写入数据后，文件操作指针移动到文件末尾，而读取文件操作是读取从指针当前位置到文件末尾的内容，所以读取不到内容。使用seek()函数，改变当前指针位置到文件开头，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"D:/test.txt"</span>, <span class="string">"w+"</span>)</span><br><span class="line">list = [<span class="string">'中国'</span>, <span class="string">'法国'</span>, <span class="string">'美国'</span>]</span><br><span class="line">fo.writelines(list)</span><br><span class="line">fo.seek(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    print(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><h4 id="数据的表示和处理"><a href="#数据的表示和处理" class="headerlink" title="数据的表示和处理"></a>数据的表示和处理</h4><h5 id="一维数据格式化处理"><a href="#一维数据格式化处理" class="headerlink" title="一维数据格式化处理"></a>一维数据格式化处理</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"D:/test.txt"</span>, <span class="string">"w+"</span>)</span><br><span class="line">list = [<span class="string">'中国'</span>, <span class="string">'法国'</span>, <span class="string">'美国'</span>]</span><br><span class="line">fo.writelines(list)</span><br><span class="line">fo.seek(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    print(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><h5 id="二维数据格式化处理"><a href="#二维数据格式化处理" class="headerlink" title="二维数据格式化处理"></a>二维数据格式化处理</h5><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-17.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-18.png" alt=" "></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从csv文件中读取二维数据存储到二维列表中</span></span><br><span class="line">fo = open(<span class="string">"test.txt"</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo</span><br><span class="line">    line = line.replace(<span class="string">"\n"</span>, <span class="string">''</span>)</span><br><span class="line">    ls.append(line.split(<span class="string">","</span>))</span><br><span class="line">fo.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将列表中的二维数据写入到csv格式的文件中</span></span><br><span class="line">ls = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">fo = open(<span class="string">"test.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ls:</span><br><span class="line">    f.write(<span class="string">","</span>.join(item) + <span class="string">'\n'</span>)</span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数据的遍历</span></span><br><span class="line">ls = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ls:</span><br><span class="line">    print(row)</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> row:</span><br><span class="line">        print(column)</span><br></pre></td></tr></table></figure></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;文件内容读取&quot;&gt;&lt;a href=&quot;#文件内容读取&quot; class=&quot;headerlink&quot; title=&quot;文件内容读取&quot;&gt;&lt;/a&gt;文件内容读取&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-9.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="File &amp; Data" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/File-Data/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="文件读取" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
      <category term="文件写入" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/"/>
    
      <category term="数据格式化处理" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python文件打开和关闭</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E5%92%8C%E5%85%B3%E9%97%AD/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E5%92%8C%E5%85%B3%E9%97%AD/</id>
    <published>2020-03-31T07:05:18.000Z</published>
    <updated>2022-04-05T07:13:38.240Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="文件的理解"><a href="#文件的理解" class="headerlink" title="文件的理解"></a>文件的理解</h4><p>文件是数据的抽象和集合，是存储在辅助存储器上的数据序列，是数据存储的一种形式。<a id="more"></a><br><strong>文件展现形态：文本文件和二进制文件</strong>。<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-1.png" alt=" "></p><p><strong>文本文件</strong>：由单一特定编码组成的文件，如UTF-8编码；由于存在编码，也被看成是存储着的长字符串；适用于例如：.txt文件、.py文件等。<br><strong>二进制文件</strong>：直接由比特0和1组成，没有统一的字符编码；一般存在二进制0和1的组织结构，即文件格式；适用于例如：.png文件、.avi文件等。</p><h4 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h4><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-4.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-5.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-6.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py13-7.png" alt=" "></p><p><strong>文件关闭：&lt;变量名&gt;.close()</strong><br>注意调用close()方法将文件及时关闭，如果没有关闭，Python在程序正常关闭时也会关闭文件。</p></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;文件的理解&quot;&gt;&lt;a href=&quot;#文件的理解&quot; class=&quot;headerlink&quot; title=&quot;文件的理解&quot;&gt;&lt;/a&gt;文件的理解&lt;/h4&gt;&lt;p&gt;文件是数据的抽象和集合，是存储在辅助存储器上的数据序列，是数据存储的一种形式。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="File &amp; Data" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/File-Data/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="文件打开" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80/"/>
    
      <category term="文件关闭" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%96%87%E4%BB%B6%E5%85%B3%E9%97%AD/"/>
    
  </entry>
  
  <entry>
    <title>Python模块和包</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</id>
    <published>2020-03-31T07:05:17.000Z</published>
    <updated>2022-04-05T07:13:18.078Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="模块和包的概念"><a href="#模块和包的概念" class="headerlink" title="模块和包的概念"></a>模块和包的概念<a id="more"></a></h4><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-1.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-2.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-3.png" alt=" "></p><p>调用模块时，由于同名模块的完整模块名不同（p1.util和p2.util），所以此时同名的模块不产生冲突。<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-4.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-5.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-6.png" alt=" "></p><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><p>Python使用import语句导入一个模块。例如，导入系统自带的模块math。可以认为math就是一个指向已导入模块的变量，通过该变量，可以访问math模块中所定义的所有公开的函数、变量和类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.pow(<span class="number">2</span>, <span class="number">0.5</span>) <span class="comment"># pow是函数  # 1.4142135623730951</span></span><br><span class="line">math.pi <span class="comment"># pi是变量  # 3.141592653589793</span></span><br></pre></td></tr></table></figure><p>如果只希望导入用到的math模块的某几个函数，而不是所有函数，可以用下面的语句。这样，可以直接引用pow, sin, log这3个函数，但math的其他函数没有导入进来，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow, sin, log</span><br><span class="line">pow(<span class="number">2</span>, <span class="number">10</span>)  <span class="comment"># 1024.0</span></span><br><span class="line">sin(<span class="number">3.14</span>)  <span class="comment"># 0.0015926529164868282</span></span><br></pre></td></tr></table></figure><p>如果遇到名字冲突，比如math模块有一个log函数，logging模块也有一个log函数：如果使用import导入模块名，由于必须通过模块名引用函数名，因此不存在冲突；如果使用from…import导入log 函数，势必引起冲突。这时，可以给函数起个“别名”来避免冲突。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math, logging</span><br><span class="line">print(math.log(<span class="number">10</span>))   <span class="comment"># 调用的是math的log函数</span></span><br><span class="line">logging.log(<span class="number">10</span>, <span class="string">'something'</span>)   <span class="comment"># 调用的是logging的log函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> log <span class="keyword">as</span> logger   <span class="comment"># logging的log现在变成了logger</span></span><br><span class="line">print(log(<span class="number">10</span>))   <span class="comment"># 调用的是math的log</span></span><br><span class="line">logger(<span class="number">10</span>, <span class="string">'import from logging'</span>)   <span class="comment"># 调用的是logging的log</span></span><br></pre></td></tr></table></figure><h4 id="动态导入模块"><a href="#动态导入模块" class="headerlink" title="动态导入模块"></a>动态导入模块</h4><p>如果导入的模块不存在，Python解释器会报ImportError错误，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> something</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named something</span><br></pre></td></tr></table></figure><p><strong>Python中存在不同模块提供相同的功能</strong>，比如io和cStringIO都提供了StringIO这个功能。这是因为Python是动态语言，解释执行，因此Python代码运行速度慢。如果要提高Python代码的运行速度，最简单的方法是把某些关键函数用C语言重写，这样就能大大提高执行速度。同样的功能，io是纯Python代码编写的，而cStringIO部分函数是C写的，因此cStringIO运行速度更快。<br>利用异常捕捉ImportError错误，可以在Python中动态导入模块，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br></pre></td></tr></table></figure><p>上述代码先尝试从cStringIO导入，如果失败了（比如cStringIO没有被安装），再尝试从io导入。这样，如果cStringIO模块存在，则将获得更快的运行速度，如果cStringIO不存在，则顶多代码运行速度会变慢，但不会影响代码的正常执行。<br><strong>try的作用是捕获错误，并在捕获到指定错误时执行except语句</strong>。</p><h4 id="fulture"><a href="#fulture" class="headerlink" title="__fulture__"></a>__fulture__</h4><p>Python的新版本会引入新的功能，但是，实际上这些功能可能在上一个版本中就已经存在了。要在旧版本“试用”某一新的特性，可以通过导入__future__模块的某些功能来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 2.7的整数除法运算结果仍是整数</span></span><br><span class="line"><span class="number">10</span> / <span class="number">3</span>  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.x已经改进了整数的除法运算，“/”除将得到浮点数，“//”除才仍是整数</span></span><br><span class="line"><span class="number">10</span> / <span class="number">3</span>  <span class="comment"># 3.3333333333333335</span></span><br><span class="line"><span class="number">10</span> // <span class="number">3</span>  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要在Python 2.7中引入3.x的除法规则，导入__future__的division</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">print</span> <span class="number">10</span> / <span class="number">3</span>  <span class="comment"># 3.3333333333333335</span></span><br></pre></td></tr></table></figure><p><strong>当新版本的一个特性与旧版本不兼容时，该特性将会在旧版本中添加到__future__中，以便旧的代码能在旧版本中测试新特性</strong>。</p><h4 id="第三方库的安装"><a href="#第三方库的安装" class="headerlink" title="第三方库的安装"></a>第三方库的安装</h4><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-7.png" alt=" "></p><p><strong>常用的pip命令</strong><br>pip install &lt;第三方库名&gt;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;安装指定的第三方库<br>pip install -U &lt;第三方库名&gt;&emsp;&emsp;&emsp;&emsp;使用-U标签更新已安装的指定第三方库<br>pip uninstall &lt;第三方库名&gt;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;卸载指定的第三方库<br>pip show &lt;第三方库名&gt;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;列出某个指定第三方库的详细信息<br>pip search &lt;关键词&gt;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;根据关键词在名称和介绍中搜索第三方库<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-8.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-9.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-10.png" alt=" "></p><p>注：某些第三方库提供下载的不是可执行文件，而是源文件。这时需要下载后需要在本地环境编译后安装，而由于本地环境的问题，常常发生安装失败，这时可以使用文件安装方法。<br></p></font><p></p></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;模块和包的概念&quot;&gt;&lt;a href=&quot;#模块和包的概念&quot; class=&quot;headerlink&quot; title=&quot;模块和包的概念&quot;&gt;&lt;/a&gt;模块和包的概念&lt;/h4&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="Module" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/Module/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="模块" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="包" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%8C%85/"/>
    
      <category term="第三方库" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Python面向对象—继承和多态</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%94%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%94%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/</id>
    <published>2020-03-31T07:05:16.000Z</published>
    <updated>2022-04-05T07:13:13.305Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p>继承可以复用已有代码，自动拥有现有类的所有功能，只需编写缺少的新功能。<a id="more"></a><br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-11.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-12.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-13.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-14.png" alt=" "></p><p>如果已经定义了Person类，需要定义新的Student和Teacher类时，可以直接从Person类继承，定义Student类时，只需要把额外的属性加上，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p><strong>一定要用super(Student, self).__init__(name, gender)去初始化父类，否则，继承自Person的Student将没有name和gender</strong>。<br><strong>函数super(Student, self)将返回当前类继承的父类，即Person，然后调用__init__()方法，注意self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）</strong>。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p><strong>类具有继承关系，并且子类类型可以向上转型看做父类类型</strong>。如果从Person派生出Student和Teacher，并都拥有whoAmI()方法如下，那么在该函数中，如果接收一个变量x，则无论该x是Person、Student还是Teacher，都可以正确打印出结果，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a Person, my name is %s'</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a Student, my name is %s'</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a Teacher, my name is %s'</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">who_am_i</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> x.whoAmI()</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Tim'</span>, <span class="string">'Male'</span>)</span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</span><br><span class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</span><br><span class="line"></span><br><span class="line">who_am_i(p)</span><br><span class="line">who_am_i(s)</span><br><span class="line">who_am_i(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">I am a Person, my name <span class="keyword">is</span> Tim</span><br><span class="line">I am a Student, my name <span class="keyword">is</span> Bob</span><br><span class="line">I am a Teacher, my name <span class="keyword">is</span> Alice</span><br></pre></td></tr></table></figure><p>这种行为称为多态。也就是说，方法调用将作用在x的实际类型上。s是Student类型，它实际上拥有自己的whoAmI()方法以及从Person继承的whoAmI()方法，但调用s.whoAmI()总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。<br>由于Python是动态语言，所以，传递给函数who_am_i(x)的参数x不一定是Person或Person的子类型。任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可。<br>这是动态语言和静态语言（例如Java）最大的差别之一。<strong>动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用</strong>。</p><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>Python允许从多个父类继承，称为多重继承。多重继承的继承链就不是一棵树了，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        print(<span class="string">'init A...'</span>)</span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        super(B, self).__init__(a)</span><br><span class="line">        print(<span class="string">'init B...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        super(C, self).__init__(a)</span><br><span class="line">        print(<span class="string">'init C...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        super(D, self).__init__(a)</span><br><span class="line">        print(<span class="string">'init D...'</span>)</span><br><span class="line"></span><br><span class="line">d = D(<span class="string">'d'</span>)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">init A...</span><br><span class="line">init C...</span><br><span class="line">init B...</span><br><span class="line">init D...</span><br></pre></td></tr></table></figure><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py15-15.png" alt=" "></p><p>如上，D同时继承自B和C，D就拥有了A、B、C的全部功能。多重继承通过super()调用__init__()方法时，A虽然被继承了两次，但__init__()只调用一次。</p><p>多重继承的目的是从两种继承树中分别选择并继承出子类，以便组合功能使用。举个例子，Python的网络服务器有TCPServer、UDPServer、UnixStreamServer、UnixDatagramServer，而服务器运行模式有多进程ForkingMixin和多线程ThreadingMixin两种。要创建多进程模式的TCPServer和多线程模式的UDPServer分别如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPServer</span><span class="params">(TCPServer, ForkingMixin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUDPServer</span><span class="params">(UDPServer, ThreadingMixin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果没有多重继承，要实现上述所有可能的组合需要4x2=8个子类。</p><h4 id="判断变量类型"><a href="#判断变量类型" class="headerlink" title="判断变量类型"></a>判断变量类型</h4><p>函数isinstance()可以判断一个变量的类型，既可以用在Python内置的数据类型如str、list、dict，也可以用在自定义的类（它们本质上都是数据类型）。<br>假设有如下的Person、Student和Teacher的定义及继承关系如下，当拿到变量p、s、t时，可以使用isinstance判断类型，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Tim'</span>, <span class="string">'Male'</span>)</span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</span><br><span class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 考察p</span></span><br><span class="line">print(isinstance(p, Person))  <span class="comment">#True  p是Person类型</span></span><br><span class="line">print(isinstance(p, Student))  <span class="comment"># False  p不是Student类型</span></span><br><span class="line">print(isinstance(p, Teacher))  <span class="comment"># False  p不是Teacher类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再考察s：</span></span><br><span class="line">print(isinstance(s, Person))  <span class="comment"># True  s是Person类型</span></span><br><span class="line">print(isinstance(s, Student))  <span class="comment"># True  s是Student类型</span></span><br><span class="line">print(isinstance(s, Teacher))  <span class="comment"># False  s不是Teacher类型</span></span><br></pre></td></tr></table></figure><p>对p的考察说明<strong>在继承链上，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法</strong>。<br>考察s时，s是Student类型，不是Teacher类型。s也是Person类型，因为Student继承自Person，拥有Person的所有公开的属性和方法。这说明<strong>在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型</strong>。</p><h4 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a Student, my name is %s'</span> % self.name</span><br></pre></td></tr></table></figure><p>用<strong>type()函数获取变量的类型，它返回一个Type对象</strong>；用<strong>dir()函数获取变量的所有属性</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="number">123</span>))  <span class="comment"># &lt;type 'int'&gt;</span></span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</span><br><span class="line">print(type(s))  <span class="comment"># &lt;class '__main__.Student'&gt;</span></span><br><span class="line">print(dir(<span class="number">123</span>))   <span class="comment"># 整数也有很多属性...  # ['__abs__', '__add__', '__and__', '__class__', '__cmp__', ...]</span></span><br><span class="line">print(dir(s))</span><br><span class="line">[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__format__'</span>,</span><br><span class="line"> <span class="string">'__getattribute__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__module__'</span>, <span class="string">'__new__'</span>,</span><br><span class="line">  <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, </span><br><span class="line">  <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'gender'</span>, <span class="string">'name'</span>, <span class="string">'score'</span>, </span><br><span class="line">  <span class="string">'whoAmI'</span>]</span><br></pre></td></tr></table></figure><p>对于实例变量，dir()返回所有实例属性，包括&#39;__class__&#39;这类有特殊意义的属性。注意到方法&#39;whoAmI&#39;也是s的一个属性。<br>dir()返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用getattr()和setattr()函数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取name属性</span></span><br><span class="line">print(getattr(s, <span class="string">'name'</span>))  <span class="comment"># 'Bob'</span></span><br><span class="line"><span class="comment"># 设置新的name属性</span></span><br><span class="line">setattr(s, <span class="string">'name'</span>, <span class="string">'Adam'</span>)  </span><br><span class="line">print(s.name)   <span class="comment"># 'Adam'</span></span><br><span class="line"><span class="comment"># 获取age属性，但是属性不存在，报错</span></span><br><span class="line">print(getattr(s, <span class="string">'age'</span>))  </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'age'</span></span><br><span class="line"><span class="comment"># 获取age属性，如果属性不存在，就返回默认值20</span></span><br><span class="line">print(getattr(s, <span class="string">'age'</span>, <span class="number">20</span>))  <span class="comment"># 20</span></span><br></pre></td></tr></table></figure></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;类的继承&quot;&gt;&lt;a href=&quot;#类的继承&quot; class=&quot;headerlink&quot; title=&quot;类的继承&quot;&gt;&lt;/a&gt;类的继承&lt;/h4&gt;&lt;p&gt;继承可以复用已有代码，自动拥有现有类的所有功能，只需编写缺少的新功能。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="Object-oriented" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/Object-oriented/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="面向对象" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="多态" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Python面向对象—类和实例的属性及方法</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%94%E7%B1%BB%E5%92%8C%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%94%E7%B1%BB%E5%92%8C%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95/</id>
    <published>2020-03-31T07:05:15.000Z</published>
    <updated>2022-04-05T07:12:00.847Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="类属性和实例属性区别"><a href="#类属性和实例属性区别" class="headerlink" title="类属性和实例属性区别"></a>类属性和实例属性区别</h4><p><strong>类是模板，而实例则是根据类创建的对象</strong>。<a id="more"></a><br>绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个。即<strong>实例属性每个实例各自拥有，互相独立，而类属性有且只有一份，所有实例共同拥有</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类属性可以直接在class中定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    address = <span class="string">'Earth'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"><span class="comment"># 因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问</span></span><br><span class="line">print(Person.address)  <span class="comment"># =&gt; Earth</span></span><br><span class="line"><span class="comment"># 对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性</span></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>)</span><br><span class="line">print(p1.address)  <span class="comment"># =&gt; Earth</span></span><br><span class="line">print(p2.address)  <span class="comment"># =&gt; Earth</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类属性也是可以动态添加和修改的</span></span><br><span class="line"><span class="comment">#因为类属性只有一份，所以，当Person类的address改变时，所有实例访问到的类属性都改变了</span></span><br><span class="line">Person.address = <span class="string">'China'</span></span><br><span class="line">print(p1.address)  <span class="comment"># =&gt; 'China'</span></span><br><span class="line">print(p2.address)  <span class="comment"># =&gt; 'China'</span></span><br></pre></td></tr></table></figure><h4 id="类属性和实例属性冲突"><a href="#类属性和实例属性冲突" class="headerlink" title="类属性和实例属性冲突"></a>类属性和实例属性冲突</h4><p>修改类属性会导致所有实例访问到的类属性全部都受影响。下面测试在实例对象上修改类属性，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    address = <span class="string">'Earth'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Person.address = '</span> + Person.address)</span><br><span class="line"></span><br><span class="line">p1.address = <span class="string">'China'</span></span><br><span class="line">print(<span class="string">'p1.address = '</span> + p1.address)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Person.address = '</span> + Person.address)</span><br><span class="line">print(<span class="string">'p2.address = '</span> + p2.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果如下：</span></span><br><span class="line">Person.address = Earth</span><br><span class="line">p1.address = China</span><br><span class="line">Person.address = Earth</span><br><span class="line">p2.address = Earth</span><br></pre></td></tr></table></figure><p>在设置了p1.address = &#39;China&#39;后，p1访问address确实变成了&#39;China&#39;，但是，Person.address和p2.address仍然是&#39;Earch&#39;。原因是p1.address = &#39;China&#39;并没有改变Person的address，而是给p1这个实例绑定了实例属性address，对p1来说，它有一个实例属性address（值是&#39;China&#39;），而它所属的类Person也有一个类属性address，所以访问p1.address时，优先查找实例属性，返回&#39;China&#39;；访问p2.address时，p2没有实例属性address，但是有类属性address，因此返回&#39;Earth&#39;。<br>可见，<strong>当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当p1的address实例属性删除后，p1.address就又返回类属性的值'Earth'了：</span></span><br><span class="line"><span class="keyword">del</span> p1.address</span><br><span class="line">print(p1.address)  <span class="comment"># =&gt; Earth</span></span><br></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><p>私有属性无法从类外部访问，但是从类的内部可以访问。除了可以定义实例的属性外，还可以定义实例的方法。<br><strong>实例方法就是在类中定义的函数，它的第一个参数永远是self，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的</strong>，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br></pre></td></tr></table></figure><p>如上，get_name(self)就是一个实例方法，它的第一个参数是self。__init__(self, name)其实也可看做是一个特殊的实例方法。<br><strong>调用实例方法必须通过实例调用</strong>，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line">print(p1.get_name())  <span class="comment"># self不需要显式传入</span></span><br><span class="line"><span class="comment"># =&gt; Bob</span></span><br></pre></td></tr></table></figure><p><strong>在实例方法内部，可以访问所有实例属性</strong>，这样，如果外部需要访问私有属性，可以通过方法调用获得，这种数据封装的形式除了能保护内部数据一致性外，还可以简化外部调用的难度。</p><h4 id="方法也是属性"><a href="#方法也是属性" class="headerlink" title="方法也是属性"></a>方法也是属性</h4><p>在class中定义的实例方法其实也是属性，它实际上是一个函数对象，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line">print(p1.get_grade)  <span class="comment"># =&gt; &lt;bound method Person.get_grade of &lt;__main__.Person object at 0x109e58510&gt;&gt;</span></span><br><span class="line">print(p1.get_grade())  <span class="comment"># =&gt; A</span></span><br></pre></td></tr></table></figure><p>如上，p1.get_grade返回的是一个函数对象，p1.get_grade()才是方法调用。<br>因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用types.MethodType()把一个函数变为一个实例方法，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn_get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.score &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">if</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line">p1.get_grade = types.MethodType(fn_get_grade, p1)</span><br><span class="line">print(p1.get_grade())  <span class="comment"># =&gt; A</span></span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>, <span class="number">65</span>)</span><br><span class="line">print(p2.get_grade())  <span class="comment"># ERROR: AttributeError: 'Person' object has no attribute 'get_grade'</span></span><br><span class="line"><span class="comment"># 因为p2实例并没有绑定get_grade</span></span><br></pre></td></tr></table></figure><p>给一个实例动态添加方法并不常见，直接在class中定义要更直观。</p><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><p><strong>在class中定义的全部是实例方法，实例方法第一个参数self是实例本身</strong>。在class中定义类方法，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_many</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.count</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Person.count = Person.count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(Person.how_many())</span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line">print(Person.how_many())</span><br></pre></td></tr></table></figure><p><strong>通过标记一个@classmethod，该方法将绑定到Person类，而非类的实例上</strong>。<strong>类方法的第一个参数将传入类本身，通常将参数名命名为cls，上面的cls.count实际上相当于Person.count</strong>。<br>因为是在类上调用，而非实例上调用，因此<strong>类方法无法获得任何实例变量，只能获得类的引用</strong>。<br></p></font><p></p></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;类属性和实例属性区别&quot;&gt;&lt;a href=&quot;#类属性和实例属性区别&quot; class=&quot;headerlink&quot; title=&quot;类属性和实例属性区别&quot;&gt;&lt;/a&gt;类属性和实例属性区别&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;类是模板，而实例则是根据类创建的对象&lt;/strong&gt;。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="Object-oriented" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/Object-oriented/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="面向对象" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="类方法" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
    
      <category term="实例方法" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/"/>
    
      <category term="类属性" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E7%B1%BB%E5%B1%9E%E6%80%A7/"/>
    
      <category term="实例属性" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python面向对象—类的定义和实例创建</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%94%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%94%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA/</id>
    <published>2020-03-31T07:05:14.000Z</published>
    <updated>2022-04-05T07:11:53.427Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h4 id="面向对象编程简介"><a href="#面向对象编程简介" class="headerlink" title="面向对象编程简介"></a>面向对象编程简介</h4><p>面向对象编程是一种程序设计范式，把程序看做不同对象的相互调用，对现实世界建立对象模型。<a id="more"></a><br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py14-1.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py14-2.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py14-3.png" alt=" "></p><h4 id="定义类并创建实例"><a href="#定义类并创建实例" class="headerlink" title="定义类并创建实例"></a>定义类并创建实例</h4><h5 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h5><p>在Python中，类通过class关键字定义。以Person为例，定义一个Person类如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>按照Python的编程习惯，类名以大写字母开头，紧接着是(object)，表示该类是从哪个类继承下来的。根据现有类创建实例如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = Person()</span><br><span class="line">xiaohong = Person()</span><br></pre></td></tr></table></figure><h5 id="创建实例属性"><a href="#创建实例属性" class="headerlink" title="创建实例属性"></a>创建实例属性</h5><p>每一个实例，都可以直接给它们的属性赋不同的值，实例的属性可以像普通变量一样进行操作，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给xiaoming加上name、gender和birth属性</span></span><br><span class="line">xiaoming = Person()</span><br><span class="line">xiaoming.name = <span class="string">'Xiao Ming'</span></span><br><span class="line">xiaoming.gender = <span class="string">'Male'</span></span><br><span class="line">xiaoming.birth = <span class="string">'1990-1-1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给xiaohong加上的属性不一定要和xiaoming相同</span></span><br><span class="line">xiaohong = Person()</span><br><span class="line">xiaohong.name = <span class="string">'Xiao Hong'</span></span><br><span class="line">xiaohong.school = <span class="string">'No. 1 High School'</span></span><br><span class="line">xiaohong.grade = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">xiaohong.grade = xiaohong.grade + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="初始化实例属性"><a href="#初始化实例属性" class="headerlink" title="初始化实例属性"></a>初始化实例属性</h4><p>在定义Person类时，可以为Person类添加一个特殊的__init__()方法。当创建实例时，__init__()方法被自动调用，就能为每个实例都统一加上某些属性，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, birth)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birth = birth</span><br></pre></td></tr></table></figure><p><strong>__init__()方法的第一个参数必须是self（也可以用别的名字，但建议使用习惯用法），后续参数则可以自由指定，和定义函数没有任何区别</strong>。<br>相应地，创建实例时，就必须要提供除self以外的参数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1991-1-1'</span>)</span><br><span class="line">xiaohong = Person(<span class="string">'Xiao Hong'</span>, <span class="string">'Female'</span>, <span class="string">'1992-2-2'</span>)</span><br></pre></td></tr></table></figure><p>有了上述__init__()方法，每个Person实例在创建时，都会有name、gender和birth这3个属性，并且，被赋予不同的属性值，访问属性使用“.”操作符，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(xiaoming.name)  <span class="comment"># 输出 'Xiao Ming'</span></span><br><span class="line">print(xiaohong.birth)  <span class="comment"># 输出 '1992-2-2'</span></span><br></pre></td></tr></table></figure><p>要特别注意的是，定义__init__()方法一定不能忘记self参数，否则会导致创建失败或运行不正常，因为第一个参数name被Python解释器传入了实例的引用，从而导致整个方法的调用参数位置全部没有对上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(name, gender, birth)</span>:</span></span><br><span class="line">         <span class="keyword">pass</span></span><br><span class="line">xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1990-1-1'</span>)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: __init__() takes exactly <span class="number">3</span> arguments (<span class="number">4</span> given)</span><br></pre></td></tr></table></figure><p>如果要接受任意关键字参数，允许把其作为属性赋值给实例，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,gender,birth,**kw)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birth = birth</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kw.items():</span><br><span class="line">            setattr(self,k,v)</span><br><span class="line"></span><br><span class="line">xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1990-1-1'</span>, job=<span class="string">'Student'</span>)</span><br><span class="line"></span><br><span class="line">print(xiaoming.name)</span><br><span class="line">print(xiaoming.job)</span><br></pre></td></tr></table></figure><h4 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h4><p><strong>Python对属性权限的控制是通过属性名来实现的，如果一个属性由双下划线开头(__)，该属性就无法被外部访问</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self._title = <span class="string">'Mr'</span></span><br><span class="line">        self.__job = <span class="string">'Student'</span></span><br><span class="line">p = Person(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="keyword">print</span> p.name  <span class="comment"># =&gt; Bob</span></span><br><span class="line"><span class="keyword">print</span> p._title  <span class="comment"># =&gt; Mr</span></span><br><span class="line"><span class="keyword">print</span> p.__job  <span class="comment"># =&gt; Error</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Person'</span> object has no attribute <span class="string">'__job'</span></span><br></pre></td></tr></table></figure><p>可见，只有以双下划线开头的&quot;__job&quot;不能直接被外部访问。但是，<strong>如果一个属性以&quot;__xxx__&quot;的形式定义，那它又可以被外部访问了，以&quot;__xxx__&quot;定义的属性在Python的类中被称为特殊属性，有很多预定义的特殊属性可以使用，通常不要把普通属性用&quot;__xxx__&quot;定义</strong>。<strong>以单下划线开头的属性&quot;_xxx&quot;虽然也可以被外部访问，但是，按照习惯，它们不应该被外部访问</strong>。<br></p></font><p></p></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h4 id=&quot;面向对象编程简介&quot;&gt;&lt;a href=&quot;#面向对象编程简介&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程简介&quot;&gt;&lt;/a&gt;面向对象编程简介&lt;/h4&gt;&lt;p&gt;面向对象编程是一种程序设计范式，把程序看做不同对象的相互调用，对现实世界建立对象模型。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Advan" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/"/>
    
      <category term="Object-oriented" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Advan/Object-oriented/"/>
    
    
      <category term="Python进阶" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E8%BF%9B%E9%98%B6/"/>
    
      <category term="面向对象" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="类的定义" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    
      <category term="实例创建" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA/"/>
    
      <category term="初始化实例" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="权限控制" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python列表生成式</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</id>
    <published>2020-03-31T07:05:13.000Z</published>
    <updated>2022-04-05T07:11:37.981Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><p>要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]，可以用range(1, 11)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">11</span>)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]方法一是循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    L.append(x * x)</span><br><span class="line">print(L)  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print([x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)])  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><p>这种写法就是Python特有的列表生成式。利用列表生成式，可以以简洁的代码生成list。写列表生成式时，把要生成的元素x*x放到前面，后面跟for循环，就可以把list创建出来。</p><h5 id="复杂表达式"><a href="#复杂表达式" class="headerlink" title="复杂表达式"></a>复杂表达式</h5><p>使用for循环的迭代不仅可以迭代普通的list，还可以迭代dict。比如一个dict如下，可以通过一个复杂的列表生成式把它变成一个HTML表格，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</span><br><span class="line">tds = [<span class="string">'&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;'</span> % (name, score) <span class="keyword">for</span> name, score <span class="keyword">in</span> d.iteritems()]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;table&gt;'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\n'</span>.join(tds)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;/table&gt;'</span></span><br></pre></td></tr></table></figure><p>注：字符串可以通过%进行格式化，用指定的参数替代%s。字符串的join()方法可以把一个list拼接成一个字符串。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Score<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Lisa<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Adam<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>95<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Bart<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>59<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将以上打印出来的结果保存为一个html文件，就可以在浏览器中看到效果了：<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py12-1.png" alt=" "></p><h5 id="条件过滤"><a href="#条件过滤" class="headerlink" title="条件过滤"></a>条件过滤</h5><p>列表生成式的for循环后面还可以加上if判断。如上平方的列表生成式，如果只想要偶数的平方，不改动range()的情况下，可以加上if来筛选，有了if条件，只有if判断为True的时候，才把循环的当前元素添加到列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print([x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>])  <span class="comment"># [4, 16, 36, 64, 100]</span></span><br></pre></td></tr></table></figure><h5 id="多层表达式"><a href="#多层表达式" class="headerlink" title="多层表达式"></a>多层表达式</h5><p>for循环可以嵌套，因此，在列表生成式中，也可以用多层for循环来生成列表。<br>对于字符串’ABC’和’123’，可以使用两层循环，生成全排列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print([m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>])</span><br><span class="line"><span class="comment"># ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>:</span><br><span class="line">        L.append(m + n)</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;p&gt;要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]，可以用range(1, 11)：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Basis/"/>
    
    
      <category term="Python基础" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="列表生成式" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python中迭代</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E8%BF%AD%E4%BB%A3/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E8%BF%AD%E4%BB%A3/</id>
    <published>2020-03-31T07:05:12.000Z</published>
    <updated>2022-04-05T07:11:10.457Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><p>在Python中，如果给定一list或tuple，通过for循环可以遍历，这种遍历称为迭代（Iteration）。<br>Python的for循环可以作用在任何可迭代对象上。因此，迭代操作就是对于一个集合，无论该集合是有序还是无序，用for循环总是可以依次取出集合的每一个元素。<a id="more"></a></p><p>注意：集合是指包含一组元素的数据结构，包括：<br><strong>1.有序集合：list，tuple，str和unicode；<br>2.无序集合：set<br>3.无序集合并且具有key-value对：dict</strong><br>而迭代是一个动词，是一种操作，在Python中就是指for循环。<br>迭代与按下标访问数组最大的不同是，后者是一种具体的迭代实现方式，而前者只关心迭代结果，根本不关心迭代内部是如何实现的。</p><h5 id="索引迭代"><a href="#索引迭代" class="headerlink" title="索引迭代"></a>索引迭代</h5><p>Python中，迭代永远是取出元素本身，而非元素的索引。<br>对于有序集合，元素确实是有索引的。有时需要在for循环中拿到索引，方法是使用enumerate()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(L):</span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> - Adam</span><br><span class="line"><span class="number">1</span> - Lisa</span><br><span class="line"><span class="number">2</span> - Bart</span><br><span class="line"><span class="number">3</span> - Paul</span><br></pre></td></tr></table></figure><p>使用enumerate()函数，可以在for循环中同时绑定索引index和元素name。实际上，enumerate()函数把：[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;, &#39;Paul&#39;]变成了类似：[(0, &#39;Adam&#39;), (1, &#39;Lisa&#39;), (2, &#39;Bart&#39;), (3, &#39;Paul&#39;)]。因此，迭代的每一个元素实际上是一个tuple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> enumerate(L):</span><br><span class="line">    index = t[<span class="number">0</span>]</span><br><span class="line">    name = t[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br></pre></td></tr></table></figure><p>可见，索引迭代也不是真的按索引访问，而是由<strong>enumerate() 函数自动把每个元素变成(index, element)这样的tuple</strong>，再迭代，就同时获得了索引和元素本身。</p><h5 id="迭代dict的value"><a href="#迭代dict的value" class="headerlink" title="迭代dict的value"></a>迭代dict的value</h5><p>dict对象本身就是可迭代对象，用for循环直接迭代dict，可以每次拿到dict的一个key。<br>如果迭代dict对象的value，dict对象有一个values()方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是dict的每一个value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</span><br><span class="line"><span class="keyword">print</span> d.values()  <span class="comment"># [85, 95, 59]</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line">    <span class="keyword">print</span> v</span><br><span class="line"><span class="comment"># 85</span></span><br><span class="line"><span class="comment"># 95</span></span><br><span class="line"><span class="comment"># 59</span></span><br></pre></td></tr></table></figure><p>dict除了values()方法外，还有一个itervalues()方法，用itervalues()方法替代values()方法，迭代效果完全一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> d.itervalues()</span><br><span class="line"><span class="comment"># &lt;dictionary-valueiterator object at 0x106adbb50&gt;</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.itervalues():</span><br><span class="line">         <span class="keyword">print</span> v</span><br><span class="line"><span class="comment"># 85</span></span><br><span class="line"><span class="comment"># 95</span></span><br><span class="line"><span class="comment"># 59</span></span><br></pre></td></tr></table></figure><p>这两个方法区别：<br>1.values()方法实际上把一个dict转换成了包含value的list。<br>2.但是itervalues()方法不会转换，它会在迭代过程中依次从dict中取出 value，所以itervalues()方法比values()方法节省了生成list所需的内存。<br>3.打印itervalues()发现它返回一个<dictionary-valueiterator>对象，这说明在Python中，for循环可作用的迭代对象远不止list，tuple，str，unicode，dict等，任何可迭代对象都可以作用于for循环，而内部如何迭代通常并不用关心。</dictionary-valueiterator></p><p>如果一个对象可迭代，那就直接用for循环去迭代它，可见，迭代是一种抽象的数据操作，它不对迭代对象内部的数据有任何要求。</p><h5 id="迭代dict的key和value"><a href="#迭代dict的key和value" class="headerlink" title="迭代dict的key和value"></a>迭代dict的key和value</h5><p>items()方法把dict对象转换成了包含tuple的list，对这个list进行迭代，可以同时获得key和value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="keyword">print</span> key, <span class="string">':'</span>, value</span><br><span class="line"></span><br><span class="line">Lisa : <span class="number">85</span></span><br><span class="line">Adam : <span class="number">95</span></span><br><span class="line">Bart : <span class="number">59</span></span><br></pre></td></tr></table></figure><p>类似values()对应itervalues()，items()也有对应的iteritems()，iteritems()不把dict转换成list，而是在迭代过程中不断给出tuple，所以，iteritems()不占用额外的内存。</p></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;p&gt;在Python中，如果给定一list或tuple，通过for循环可以遍历，这种遍历称为迭代（Iteration）。&lt;br&gt;Python的for循环可以作用在任何可迭代对象上。因此，迭代操作就是对于一个集合，无论该集合是有序还是无序，用for循环总是可以依次取出集合的每一个元素。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Basis/"/>
    
    
      <category term="Python基础" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="迭代" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E8%BF%AD%E4%BB%A3/"/>
    
  </entry>
  
  <entry>
    <title>Python切片操作</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C/</id>
    <published>2020-03-31T07:05:11.000Z</published>
    <updated>2022-04-05T07:10:59.967Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><h5 id="list切片"><a href="#list切片" class="headerlink" title="list切片"></a>list切片</h5><p>Python提供了切片（Slice）操作符“<strong>:</strong>”，简化取指定索引范围的操作。<br>L = [&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;, &#39;Paul&#39;]取前3个元素，用<strong>L[0:3]实现，表示从索引0开始取，直到索引3为止，但不包括索引3</strong>。<a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment"># ['Adam', 'Lisa', 'Bart']</span></span><br><span class="line"><span class="comment"># 如果第一个索引是0，可以省略</span></span><br><span class="line">L[:<span class="number">3</span>]  <span class="comment"># ['Adam', 'Lisa', 'Bart']</span></span><br><span class="line"><span class="comment"># 也可以从索引1开始，取出2个元素出来</span></span><br><span class="line">L[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># ['Lisa', 'Bart']</span></span><br><span class="line"><span class="comment"># 只用一个“:”，表示从头到尾取出所有元素，L[:]实际上复制出了一个新list</span></span><br><span class="line">L[:]  <span class="comment"># ['Adam', 'Lisa', 'Bart', 'Paul']</span></span><br></pre></td></tr></table></figure><p>切片操作还可以指定第三个参数，<strong>第三个参数表示每N个元素取一个</strong>，上面的L[::2]会每两个元素取出一个来，也就是隔一个取一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[::<span class="number">2</span>]  <span class="comment"># ['Adam', 'Bart']</span></span><br></pre></td></tr></table></figure><p>把list换成tuple，切片操作完全相同，只是切片的结果也变成了tuple。</p><h5 id="倒序切片"><a href="#倒序切片" class="headerlink" title="倒序切片"></a>倒序切片</h5><p>对于list，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line">L[<span class="number">-2</span>:]  <span class="comment"># ['Bart', 'Paul']</span></span><br><span class="line">L[:<span class="number">-2</span>]  <span class="comment"># ['Adam', 'Lisa']</span></span><br><span class="line">L[<span class="number">-3</span>:<span class="number">-1</span>]  <span class="comment"># ['Lisa', 'Bart']</span></span><br><span class="line">L[<span class="number">-4</span>:<span class="number">-1</span>:<span class="number">2</span>]  <span class="comment"># ['Adam', 'Bart']</span></span><br></pre></td></tr></table></figure><p><strong>倒数第一个元素的索引是-1。倒序切片包含起始索引，不包含结束索引</strong>。</p><h5 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h5><p>字符串’xxx’和Unicode字符串u’xxx’（Python3不再需要u）也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'ABCDEFG'</span>[:<span class="number">3</span>]  <span class="comment"># 'ABC'</span></span><br><span class="line"><span class="string">'ABCDEFG'</span>[<span class="number">-3</span>:]  <span class="comment"># 'EFG'</span></span><br><span class="line"><span class="string">'ABCDEFG'</span>[::<span class="number">2</span>]  <span class="comment"># 'ACEG'</span></span><br></pre></td></tr></table></figure><p>在很多编程语言中，针对字符串提供了很多各种截取函数，其实目的就是对字符串切片。Python没有针对字符串的截取函数，只需要切片操作就可以完成。</p></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;h5 id=&quot;list切片&quot;&gt;&lt;a href=&quot;#list切片&quot; class=&quot;headerlink&quot; title=&quot;list切片&quot;&gt;&lt;/a&gt;list切片&lt;/h5&gt;&lt;p&gt;Python提供了切片（Slice）操作符“&lt;strong&gt;:&lt;/strong&gt;”，简化取指定索引范围的操作。&lt;br&gt;L = [&amp;#39;Adam&amp;#39;, &amp;#39;Lisa&amp;#39;, &amp;#39;Bart&amp;#39;, &amp;#39;Paul&amp;#39;]取前3个元素，用&lt;strong&gt;L[0:3]实现，表示从索引0开始取，直到索引3为止，但不包括索引3&lt;/strong&gt;。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Basis/"/>
    
    
      <category term="Python基础" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="切片" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%88%87%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Python中set类型</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADset%E7%B1%BB%E5%9E%8B/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADset%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-03-31T07:05:10.000Z</published>
    <updated>2022-04-05T07:10:24.312Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><p>set像list一样，有一系列元素，但是<strong>set的元素没有重复，而且是无序的</strong>，这和dict的key很像。</p><a id="more"></a><h5 id="set的特点"><a href="#set的特点" class="headerlink" title="set的特点"></a>set的特点</h5><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py10-1.png" alt=" "></p><p>set的内部结构和dict很像，唯一区别是<strong>不存储value</strong>，因此，判断一个元素是否在set中速度很快。<br><strong>set存储的元素和dict的key类似，必须是不变对象，因此，任何可变对象是不能放入set中的</strong>。<br><strong>set存储的元素也是没有顺序的</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">weekdays = set([<span class="string">'MON'</span>, <span class="string">'TUE'</span>, <span class="string">'WED'</span>, <span class="string">'THU'</span>, <span class="string">'FRI'</span>, <span class="string">'SAT'</span>, <span class="string">'SUN'</span>])</span><br><span class="line">x = input() <span class="comment"># 用户输入的字符串</span></span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">in</span> weekdays:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input ok'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input error'</span></span><br></pre></td></tr></table></figure><h5 id="set的处理方法"><a href="#set的处理方法" class="headerlink" title="set的处理方法"></a>set的处理方法</h5><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py10-2.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py10-3.png" alt=" "></p><h5 id="创建set"><a href="#创建set" class="headerlink" title="创建set"></a>创建set</h5><p>可以直接通过<strong>{}</strong>创建set，亦可以调用set()函数（可以理解为强制类型转换）创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="string">'123'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>&#125;</span><br><span class="line">print(set1)  <span class="comment"># &#123;'123','1','2'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入一个list，list的元素将作为set的元素：</span></span><br><span class="line">s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line">print(s)  <span class="comment"># &#123;'A', 'C', 'B'&#125;</span></span><br><span class="line"></span><br><span class="line">s = set(<span class="string">'12345'</span>)</span><br><span class="line">print(s)  <span class="comment"># &#123;'1','2','3','4','5'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入包含重复元素的list,set会自动去掉重复元素</span></span><br><span class="line"><span class="comment"># 如下，原来的list有4个元素，但set只有3个元素</span></span><br><span class="line">s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'C'</span>])</span><br><span class="line">print(s)  <span class="comment"># &#123;'A', 'C', 'B'&#125;</span></span><br><span class="line">len(s)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h5 id="访问set"><a href="#访问set" class="headerlink" title="访问set"></a>访问set</h5><p>访问set中的某个元素实际上就是判断一个元素是否在set中。由于set也是一个集合，所以，遍历set和遍历list类似，都可以通过for循环实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>])</span><br><span class="line">print(<span class="string">'bart'</span> <span class="keyword">in</span> s)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>])</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> s:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><h5 id="更新set"><a href="#更新set" class="headerlink" title="更新set"></a>更新set</h5><p>由于set存储的是一组不重复的无序元素，因此，更新set操作主要是添加新元素到set中和删除set已有元素两种。<br>添加元素时，用set的add()方法。如果添加的元素已经存在，add()不会报错，但是不再添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line">print(s)  <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s.add(<span class="number">3</span>)</span><br><span class="line">print(s)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><p>删除元素时，用set的remove()方法。如果删除的元素不存在set中，remove()会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line">print(s)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">      File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">4</span></span><br></pre></td></tr></table></figure><p>所以<strong>用add()可以直接添加，而使用remove()前需要判断</strong>。</p><h5 id="set操作符"><a href="#set操作符" class="headerlink" title="set操作符"></a>set操作符</h5><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py10-4.png" alt=" "></p><p>另有&lt;=，&lt;，&gt;=，&gt;两组关系操作符判断集合的包含关系。<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py10-5.png" alt=" "></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">A = &#123;<span class="string">'p'</span>, <span class="string">'y'</span>, <span class="string">'123'</span>&#125;</span><br><span class="line">B = set(<span class="string">'pypy123'</span>)  <span class="comment">#B = &#123;'p', 'y', '1', '2', '3'&#125;</span></span><br><span class="line"></span><br><span class="line">A |= B</span><br><span class="line">print(A)  <span class="comment"># &#123;'p','y','123','1','2','3'&#125;</span></span><br><span class="line"></span><br><span class="line">A -= B</span><br><span class="line">print(A)  <span class="comment"># &#123;'123'&#125;</span></span><br><span class="line"></span><br><span class="line">A &amp;= B</span><br><span class="line">print(A)  <span class="comment"># &#123;'p','y'&#125;</span></span><br><span class="line"></span><br><span class="line">A ^= B</span><br><span class="line">print(A)  <span class="comment"># &#123;'123','1','2','3'&#125;</span></span><br></pre></td></tr></table></figure><h5 id="set应用"><a href="#set应用" class="headerlink" title="set应用"></a>set应用</h5><p>1.关系比较（判断包含关系）<br>2.数据去重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">s = set(l)</span><br><span class="line">l = list(s)</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;p&gt;set像list一样，有一系列元素，但是&lt;strong&gt;set的元素没有重复，而且是无序的&lt;/strong&gt;，这和dict的key很像。&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Basis/"/>
    
    
      <category term="Python基础" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="set" scheme="https://github.com/xtlei/xtlei.github.io/tags/set/"/>
    
      <category term="集合" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Python中dict类型</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADdict%E7%B1%BB%E5%9E%8B/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADdict%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-03-31T07:05:09.000Z</published>
    <updated>2022-04-05T07:10:19.308Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py9-1.png" alt=" "><a id="more"></a></p><p>Python中list和tuple可以用来表示顺序集合，例如，班里同学的名字：[‘Adam’, ‘Lisa’, ‘Bart’]或者考试的成绩列表：[95, 85, 59]。<br>Python用dict表示“名字”-“成绩”的查找表如下，<strong>花括号{}表示这是一个dict，然后按照key: value,写出来即可</strong>。最后一个key: value的逗号可以省略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">'Adam'</span>: <span class="number">95</span>,</span><br><span class="line">    <span class="string">'Lisa'</span>: <span class="number">85</span>,</span><br><span class="line">    <span class="string">'Bart'</span>: <span class="number">59</span></span><br><span class="line">&#125;</span><br><span class="line">print(len(d)) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增键值对 Cindy:65</span></span><br><span class="line">d[<span class="string">'Cindy'</span>] = <span class="number">65</span></span><br></pre></td></tr></table></figure><h5 id="dict访问"><a href="#dict访问" class="headerlink" title="dict访问"></a>dict访问</h5><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py9-2.png" alt=" "></p><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py9-3.png" alt=" "></p><p>对于以上Dict，使用d[key]的形式来查找对应的value，这和list很像，不同之处是，<strong>list必须使用索引返回对应的元素，而dict使用key</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (d[<span class="string">'Adam'</span>]) <span class="comment"># 95</span></span><br><span class="line"><span class="keyword">print</span> (d[<span class="string">'Paul'</span>])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"index.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> d[<span class="string">'Paul'</span>]</span><br><span class="line">KeyError: <span class="string">'Paul'</span></span><br></pre></td></tr></table></figure><p>注意:通过key访问dict的value，只要key存在，dict就返回对应的value。如果key不存在，会直接报错：KeyError。要避免KeyError发生，有两个办法：<br>一是先判断一下key是否存在，如果&#39;Paul&#39;不存在，if语句判断为False，自然不会执行print d[&#39;Paul&#39;]，从而避免了错误。用in操作符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'Paul'</span> <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">print</span> (d[<span class="string">'Paul'</span>])</span><br></pre></td></tr></table></figure><p>二是使用dict本身提供的一个get方法，在key不存在的时候，返回None：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (d.get(<span class="string">'Bart'</span>)) <span class="comment"># 59</span></span><br><span class="line"><span class="keyword">print</span> (d.get(<span class="string">'Paul'</span>)) <span class="comment"># None</span></span><br></pre></td></tr></table></figure><h5 id="dict特点"><a href="#dict特点" class="headerlink" title="dict特点"></a>dict特点</h5><p>dict的第一个特点是<strong>查找速度快</strong>，无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。不过dict的查找速度快不是没有代价的，<strong>dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢</strong>。<br>由于dict是按key查找，所以，<strong>在一个dict中，key不能重复</strong>。</p><p>dict的第二个特点就是<strong>存储的key-value序对是没有顺序的</strong>！而list是有序的，当打印以上dict时，打印的顺序不一定是创建时的顺序，而且，不同的机器打印的顺序都可能不同，这说明dict内部是无序的，不能用dict存储有序的集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (d) <span class="comment"># &#123;'Lisa': 85, 'Adam': 95, 'Bart': 59&#125;</span></span><br></pre></td></tr></table></figure><p>dict的第三个特点是<strong>作为key的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为key。但是list是可变的，就不能作为key</strong>。<br><strong>不可变这个限制仅作用于key，value是否可变无所谓</strong>。</p><h5 id="更新dict"><a href="#更新dict" class="headerlink" title="更新dict"></a>更新dict</h5><p>dict是可变的，可以随时往dict中添加新的key-value。如果key已经存在，则赋值会用新的value替换掉原来的value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">'Paul'</span>] = <span class="number">72</span></span><br><span class="line"><span class="keyword">print</span> (d) <span class="comment"># &#123;'Lisa': 85, 'Paul': 72, 'Adam': 95, 'Bart': 59&#125;</span></span><br><span class="line"></span><br><span class="line">d[<span class="string">'Bart'</span>] = <span class="number">60</span></span><br><span class="line">print(d) <span class="comment"># &#123;'Lisa': 85, 'Paul': 72, 'Adam': 95, 'Bart': 60&#125;</span></span><br></pre></td></tr></table></figure><h5 id="遍历dict"><a href="#遍历dict" class="headerlink" title="遍历dict"></a>遍历dict</h5><p>由于dict也是一个集合，所以，遍历dict和遍历list类似，都可以通过for循环实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用for循环可以遍历dict的key：</span></span><br><span class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    print(key)</span><br><span class="line">Lisa</span><br><span class="line">Adam</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>由于通过key可以获取对应的value，因此，在循环体内，可以获取到value的值。<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py9-4.png" alt=" "></p></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py9-1.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Basis/"/>
    
    
      <category term="Python基础" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="字典" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
      <category term="dict" scheme="https://github.com/xtlei/xtlei.github.io/tags/dict/"/>
    
  </entry>
  
  <entry>
    <title>Python中tuple类型</title>
    <link href="https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADtuple%E7%B1%BB%E5%9E%8B/"/>
    <id>https://github.com/xtlei/xtlei.github.io/2020/03/31/Python%E4%B8%ADtuple%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-03-31T07:05:08.000Z</published>
    <updated>2022-04-05T07:10:11.733Z</updated>
    
    <content type="html"><![CDATA[<html><font face="Times New Roman,宋体" size="4"><p><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py7-1.png" alt=" "></p><a id="more"></a><h5 id="创建tuple"><a href="#创建tuple" class="headerlink" title="创建tuple"></a>创建tuple</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>) <span class="comment">#使用()创建</span></span><br><span class="line">t = tuple((<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>))</span><br><span class="line">t = <span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>  <span class="comment"># 'A', 'B' 不论是否用小括号包括，本身就是元组类型</span></span><br></pre></td></tr></table></figure><p><strong>创建tuple和创建list唯一不同之处是用( )替代了[ ]</strong>。<br><strong>创建后元组t就不能改变了，不能向tuple中删除和添加元素</strong>。</p><p>获取tuple元素的方式和list是一样的，可以使用t[0]，t[-1]等索引方式访问元素，但是不能赋值成别的元素，否则就会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t[<span class="number">0</span>] = <span class="string">'Paul'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><p>tuple和list一样，可以包含0个、1个和任意多个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 包含0个元素的tuple，也就是空tuple</span></span><br><span class="line">t = ()</span><br><span class="line">print(t)  <span class="comment"># ()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#包含一个元素的tuple</span></span><br><span class="line">t = (<span class="number">1</span>)</span><br><span class="line">print(t)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>上述包含一个元素1的元组输出内容为整数1，不是元组类型(1)。因为()既可以表示tuple，又可以作为括号表示运算时的优先级，结果(1)被Python解释器计算出结果1，导致我们得到的不是tuple，而是整数1。<br>正是因为用()定义单元素的tuple有歧义，所以<strong>Python规定，单元素tuple要多加一个逗号“,”</strong>，这样就避免了歧义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,)</span><br><span class="line">print(t)  <span class="comment"># (1,)</span></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,)</span><br><span class="line">print(t)  <span class="comment"># (1, 2, 3)</span></span><br></pre></td></tr></table></figure><p>Python在打印单元素tuple时，也自动添加了一个“,”，为了更明确地表明这是一个tuple。多元素tuple加不加这个额外的“,”效果是一样的。</p><h5 id="“可变”的tuple"><a href="#“可变”的tuple" class="headerlink" title="“可变”的tuple"></a>“可变”的tuple</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">L = t[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>注意到t有3个元素：&#39;a&#39;，&#39;b&#39;和一个list：[&#39;A&#39;, &#39;B&#39;]。list作为一个整体是tuple的第3个元素，可以通过t[2]拿到。<br>修改list的两个元素，再看tuple的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line">L[<span class="number">1</span>] = <span class="string">'Y'</span></span><br><span class="line">print(t)  <span class="comment"># ('a', 'b', ['X', 'Y'])</span></span><br></pre></td></tr></table></figure><p>不是说tuple一旦定义后就不可变了吗？怎么现在又变了？<br>定义的时候tuple包含的3个元素：<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py7-2.png" alt=" "></p><p>当把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：<br><img src="https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py7-3.png" alt=" "></p><p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向&#39;a&#39;，就不能改成指向&#39;b&#39;，指向一个list，就不能改成指向其他对象，但这里指向的list本身可变导致tuple“可变”。所以要创建一个内容不变的tuple必须保证tuple的每一个元素本身也不能变。</p></font></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;
&lt;font face=&quot;Times New Roman,宋体&quot; size=&quot;4&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://xtlei.oss-cn-hongkong.aliyuncs.com/python/py7-1.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;&lt;/font&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="软件开发" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
      <category term="Basis" scheme="https://github.com/xtlei/xtlei.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/Basis/"/>
    
    
      <category term="Python基础" scheme="https://github.com/xtlei/xtlei.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="序列" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="tuple" scheme="https://github.com/xtlei/xtlei.github.io/tags/tuple/"/>
    
      <category term="元组" scheme="https://github.com/xtlei/xtlei.github.io/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
</feed>
